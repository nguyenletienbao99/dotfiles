[
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "imp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imp",
        "description": "imp",
        "detail": "imp",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "expanduser",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "isdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "getpreferredencoding",
        "importPath": "locale",
        "description": "locale",
        "isExtraImport": true,
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "vim_get_func",
        "importPath": "powerline.bindings.vim",
        "description": "powerline.bindings.vim",
        "isExtraImport": true,
        "detail": "powerline.bindings.vim",
        "documentation": {}
    },
    {
        "label": "buffer_name",
        "importPath": "powerline.bindings.vim",
        "description": "powerline.bindings.vim",
        "isExtraImport": true,
        "detail": "powerline.bindings.vim",
        "documentation": {}
    },
    {
        "label": "requires_segment_info",
        "importPath": "powerline.theme",
        "description": "powerline.theme",
        "isExtraImport": true,
        "detail": "powerline.theme",
        "documentation": {}
    },
    {
        "label": "denite.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "denite.util",
        "description": "denite.util",
        "detail": "denite.util",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "a",
        "description": "a",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "b",
        "description": "b",
        "detail": "b",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "c",
        "description": "c",
        "detail": "c",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "d",
        "description": "d",
        "detail": "d",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "f",
        "description": "f",
        "detail": "f",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "os.path,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path.",
        "description": "os.path.",
        "detail": "os.path.",
        "documentation": {}
    },
    {
        "label": "a.b.c.d",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "a.b.c.d",
        "description": "a.b.c.d",
        "detail": "a.b.c.d",
        "documentation": {}
    },
    {
        "label": "X",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "long_module_name_1,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "long_module_name_1.",
        "description": "long_module_name_1.",
        "detail": "long_module_name_1.",
        "documentation": {}
    },
    {
        "label": "long_function_name_1",
        "importPath": "some_module",
        "description": "some_module",
        "isExtraImport": true,
        "detail": "some_module",
        "documentation": {}
    },
    {
        "label": "long_function_name_2",
        "importPath": "some_module",
        "description": "some_module",
        "isExtraImport": true,
        "detail": "some_module",
        "documentation": {}
    },
    {
        "label": "long_function_name_3",
        "importPath": "some_module",
        "description": "some_module",
        "isExtraImport": true,
        "detail": "some_module",
        "documentation": {}
    },
    {
        "label": "some_module",
        "importPath": "some_module",
        "description": "some_module",
        "isExtraImport": true,
        "detail": "some_module",
        "documentation": {}
    },
    {
        "label": "\\",
        "kind": 6,
        "isExtraImport": true,
        "importPath": ".",
        "description": ".",
        "detail": ".",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "token",
        "description": "token",
        "detail": "token",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tokenize",
        "description": "tokenize",
        "detail": "tokenize",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "six",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "six",
        "description": "six",
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "iteritems",
        "importPath": "six",
        "description": "six",
        "isExtraImport": true,
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "six.moves",
        "description": "six.moves",
        "isExtraImport": true,
        "detail": "six.moves",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numbers",
        "description": "numbers",
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "fileinput",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fileinput",
        "description": "fileinput",
        "detail": "fileinput",
        "documentation": {}
    },
    {
        "label": "asttokens",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asttokens",
        "description": "asttokens",
        "detail": "asttokens",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "keyword",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyword",
        "description": "keyword",
        "detail": "keyword",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "importPath": "fnmatch",
        "description": "fnmatch",
        "isExtraImport": true,
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "nvim.bundle.ale.rplugin.python3.deoplete.sources.ale",
        "description": "nvim.bundle.ale.rplugin.python3.deoplete.sources.ale",
        "peekOfCode": "class Source(Base):\n    def __init__(self, vim):\n        super(Source, self).__init__(vim)\n        self.name = 'ale'\n        self.mark = '[L]'\n        self.rank = 1000\n        self.is_bytepos = True\n        self.min_pattern_length = 1\n        self.is_volatile = True\n        # Do not forget to update s:trigger_character_map in completion.vim in",
        "detail": "nvim.bundle.ale.rplugin.python3.deoplete.sources.ale",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "nvim.bundle.ale.rplugin.python3.deoplete.sources.ale",
        "description": "nvim.bundle.ale.rplugin.python3.deoplete.sources.ale",
        "peekOfCode": "__author__ = 'Joao Paulo, w0rp'\ntry:\n    from deoplete.source.base import Base\nexcept ImportError:\n    # Mock the Base class if deoplete isn't available, as mock isn't available\n    # in the Docker image.\n    class Base(object):\n        def __init__(self, vim):\n            pass\n# Make sure this code is valid in Python 2, used for running unit tests.",
        "detail": "nvim.bundle.ale.rplugin.python3.deoplete.sources.ale",
        "documentation": {}
    },
    {
        "label": "VimMock",
        "kind": 6,
        "importPath": "nvim.bundle.ale.test.python.test_deoplete_source",
        "description": "nvim.bundle.ale.test.python.test_deoplete_source",
        "peekOfCode": "class VimMock(object):\n    def __init__(self, call_list, call_results, commands):\n        self.__call_list = call_list\n        self.__call_results = call_results\n        self.__commands = commands\n    def call(self, function, *args):\n        self.__call_list.append((function, args))\n        return self.__call_results.get(function, 0)\n    def command(self, command):\n        self.__commands.append(command)",
        "detail": "nvim.bundle.ale.test.python.test_deoplete_source",
        "documentation": {}
    },
    {
        "label": "DeopleteSourceTest",
        "kind": 6,
        "importPath": "nvim.bundle.ale.test.python.test_deoplete_source",
        "description": "nvim.bundle.ale.test.python.test_deoplete_source",
        "peekOfCode": "class DeopleteSourceTest(unittest.TestCase):\n    def setUp(self):\n        super(DeopleteSourceTest, self).setUp()\n        self.call_list = []\n        self.call_results = {'ale#completion#CanProvideCompletions': 1}\n        self.commands = []\n        self.source = ale_module.Source('vim')\n        self.source.vim = VimMock(\n            self.call_list, self.call_results, self.commands)\n    def test_attributes(self):",
        "detail": "nvim.bundle.ale.test.python.test_deoplete_source",
        "documentation": {}
    },
    {
        "label": "ale_module",
        "kind": 5,
        "importPath": "nvim.bundle.ale.test.python.test_deoplete_source",
        "description": "nvim.bundle.ale.test.python.test_deoplete_source",
        "peekOfCode": "ale_module = imp.load_source(\n    'deoplete.sources.ale',\n    '/testplugin/rplugin/python3/deoplete/sources/ale.py',\n)\nclass VimMock(object):\n    def __init__(self, call_list, call_results, commands):\n        self.__call_list = call_list\n        self.__call_results = call_results\n        self.__commands = commands\n    def call(self, function, *args):",
        "detail": "nvim.bundle.ale.test.python.test_deoplete_source",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "nvim.bundle.ale.test.script.dumb_named_pipe_server",
        "description": "nvim.bundle.ale.test.script.dumb_named_pipe_server",
        "peekOfCode": "def main():\n    if len(sys.argv) < 2:\n        sys.exit('You must specify a filepath')\n    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    if os.path.exists(sys.argv[1]):\n        os.remove(sys.argv[1])\n    sock.bind(sys.argv[1])\n    sock.listen(0)\n    pid = os.fork()",
        "detail": "nvim.bundle.ale.test.script.dumb_named_pipe_server",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "nvim.bundle.ale.test.script.dumb_tcp_client",
        "description": "nvim.bundle.ale.test.script.dumb_tcp_client",
        "peekOfCode": "def main():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    result = sock.connect_ex(('127.0.0.1', int(sys.argv[1])))\n    if result:\n        sock.close()\n        sys.exit(\"Couldn't connect to the socket!\")\n    data_sent = 'x' * 1024\n    sock.send(data_sent)\n    data_received = sock.recv(1024)\n    if data_sent != data_received:",
        "detail": "nvim.bundle.ale.test.script.dumb_tcp_client",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "nvim.bundle.ale.test.script.dumb_tcp_server",
        "description": "nvim.bundle.ale.test.script.dumb_tcp_server",
        "peekOfCode": "def main():\n    if len(sys.argv) < 2 or not sys.argv[1].isdigit():\n        sys.exit('You must specify a port number')\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind(('127.0.0.1', int(sys.argv[1])))\n    sock.listen(0)\n    pid = os.fork()\n    if pid:\n        print(pid)",
        "detail": "nvim.bundle.ale.test.script.dumb_tcp_server",
        "documentation": {}
    },
    {
        "label": "GlobError",
        "kind": 6,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "class GlobError(ValueError):\n    pass\ndef glob_rules(root, rules):\n    root = pathlib.Path(root).expanduser()\n    try:\n        files = {f for rule in rules for f in root.glob(rule) if pathlib.Path.is_file(f)}\n    except ValueError as e:\n        raise GlobError(e)\n    return files\nclass IgnoreFileError(ValueError):",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "IgnoreFileError",
        "kind": 6,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "class IgnoreFileError(ValueError):\n    pass\ndef load_ignore_rules(file_path):\n    ignore_rules = []\n    try:\n        with open(expanduser(file_path), 'r') as f:\n            for line in f:\n                line = line.strip()\n                if line == '' or re.search(r'^\\s*#', line):\n                    continue",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def proc(rules_origin):\n    '''\n    input  -> output\n    tail\n    file: xx\n    dir: xx/    -> xxx/**/*\n        xx/**  -> xxx/**/*\n        xx/**/ -> xxx/**/*\n    head\n    under root: /xx    -> xx",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "exception_ignore",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def exception_ignore(ignore_rules_origin):\n    ignore_rules = []\n    exception_ignore_rules = []\n    for rule in ignore_rules_origin:\n        if rule[0] == '!':\n            exception_ignore_rules.append(rule[1:])\n        else:\n            ignore_rules.append(rule)\n    return ignore_rules, exception_ignore_rules\nclass GlobError(ValueError):",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "glob_rules",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def glob_rules(root, rules):\n    root = pathlib.Path(root).expanduser()\n    try:\n        files = {f for rule in rules for f in root.glob(rule) if pathlib.Path.is_file(f)}\n    except ValueError as e:\n        raise GlobError(e)\n    return files\nclass IgnoreFileError(ValueError):\n    pass\ndef load_ignore_rules(file_path):",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "load_ignore_rules",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def load_ignore_rules(file_path):\n    ignore_rules = []\n    try:\n        with open(expanduser(file_path), 'r') as f:\n            for line in f:\n                line = line.strip()\n                if line == '' or re.search(r'^\\s*#', line):\n                    continue\n                ignore_rules.append(line)\n    except FileNotFoundError as e:",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "far_glob",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def far_glob(root, rules, ignore_rules):\n    '''\n    root: string\n    rules, ignore_rules: list\n    root can contain '~'\n    rules and ignore_rules:\n        xx, yy, is path expression, can contain '/'\n        head:\n            /xx              directly udner the 'root' dir\n            xx               recursively udner the 'root' dir",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "rg_ignore_globs",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def rg_ignore_globs(files, as_str=True):\n    ignored = {\n        ignore_glob\n        for sublist in [\n            open(ignore_file, 'r').read().split('\\n')\n            for ignore_file in files\n            if os.path.exists(ignore_file)\n        ]\n        for ignore_glob in sublist\n        if len(ignore_glob.strip()) > 0 and (\"#\" not in ignore_glob)",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "rg_rules_glob",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def rg_rules_glob(rules, as_str=True):\n    # Don't include * globbing rules.  rg behaves like this by default, and explicitly\n    # adding these causes rg to stop ignoring its built-in ignored files.\n    rules = [ r for r in rules if r not in ( '*', '**/*' ) ]\n    if as_str:\n        return ' '.join(map(lambda dir: f\"-g \\\"{dir}\\\"\", rules))\n    else:\n        return [ '-g' if g else d for d in rules for g in (True, False) ]",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.shell",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.shell",
        "peekOfCode": "def search(ctx, args, cmdargs):\n    logger.debug('search(%s, %s, %s)', str(ctx), str(args), str(cmdargs))\n    final_result = {'warning': ''}\n    if not args.get('cmd'):\n        return {'error': 'no cmd in args'}\n    source = ctx['source']\n    pattern = ctx['pattern']\n    regex = ctx['regex']\n    case_sensitive = ctx['case_sensitive']\n    file_mask = ctx['file_mask']",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.shell",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "nvim.bundle.far.vim.rplugin.python3.far.sources.shell",
        "description": "nvim.bundle.far.vim.rplugin.python3.far.sources.shell",
        "peekOfCode": "logger = logging.getLogger('far')\ndef search(ctx, args, cmdargs):\n    logger.debug('search(%s, %s, %s)', str(ctx), str(args), str(cmdargs))\n    final_result = {'warning': ''}\n    if not args.get('cmd'):\n        return {'error': 'no cmd in args'}\n    source = ctx['source']\n    pattern = ctx['pattern']\n    regex = ctx['regex']\n    case_sensitive = ctx['case_sensitive']",
        "detail": "nvim.bundle.far.vim.rplugin.python3.far.sources.shell",
        "documentation": {}
    },
    {
        "label": "print_num",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.test.very long directory name with spaces.very long file name also with spaces",
        "description": "nvim.bundle.far.vim.test.very long directory name with spaces.very long file name also with spaces",
        "peekOfCode": "def print_num(number):\n    print(number)",
        "detail": "nvim.bundle.far.vim.test.very long directory name with spaces.very long file name also with spaces",
        "documentation": {}
    },
    {
        "label": "guesses_made",
        "kind": 5,
        "importPath": "nvim.bundle.far.vim.test.guess",
        "description": "nvim.bundle.far.vim.test.guess",
        "peekOfCode": "guesses_made = 0\nname = raw_input('Hello! What is your name?\\n')\nnumber = random.randint(1, 20)\nprint 'Well, {0}, I am thinking of a number between 1 and 20.'.format(name)\nwhile guesses_made < 6:\n    guess = int(raw_input('Take a guess: '))\n    guesses_made += 1\n    if guess < number:\n        print 'Your guess is too low.'\n    if guess > number:",
        "detail": "nvim.bundle.far.vim.test.guess",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "nvim.bundle.far.vim.test.guess",
        "description": "nvim.bundle.far.vim.test.guess",
        "peekOfCode": "name = raw_input('Hello! What is your name?\\n')\nnumber = random.randint(1, 20)\nprint 'Well, {0}, I am thinking of a number between 1 and 20.'.format(name)\nwhile guesses_made < 6:\n    guess = int(raw_input('Take a guess: '))\n    guesses_made += 1\n    if guess < number:\n        print 'Your guess is too low.'\n    if guess > number:\n        print 'Your guess is too high.'",
        "detail": "nvim.bundle.far.vim.test.guess",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "nvim.bundle.far.vim.test.guess",
        "description": "nvim.bundle.far.vim.test.guess",
        "peekOfCode": "number = random.randint(1, 20)\nprint 'Well, {0}, I am thinking of a number between 1 and 20.'.format(name)\nwhile guesses_made < 6:\n    guess = int(raw_input('Take a guess: '))\n    guesses_made += 1\n    if guess < number:\n        print 'Your guess is too low.'\n    if guess > number:\n        print 'Your guess is too high.'\n    if guess == number:",
        "detail": "nvim.bundle.far.vim.test.guess",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "nvim.bundle.far.vim.test.odd",
        "description": "nvim.bundle.far.vim.test.odd",
        "peekOfCode": "num = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))",
        "detail": "nvim.bundle.far.vim.test.odd",
        "documentation": {}
    },
    {
        "label": "iter_primes",
        "kind": 2,
        "importPath": "nvim.bundle.far.vim.test.prime",
        "description": "nvim.bundle.far.vim.test.prime",
        "peekOfCode": "def iter_primes():\n     # an iterator of all numbers between 2 and +infinity\n     numbers = itertools.count(2)\n     # generate primes forever\n     while True:\n         # get the first number from the iterator (always a prime)\n         prime = numbers.next()\n         yield prime\n         # this code iteratively builds up a chain of\n         # filters...slightly tricky, but ponder it a bit",
        "detail": "nvim.bundle.far.vim.test.prime",
        "documentation": {}
    },
    {
        "label": "webdevicons",
        "kind": 2,
        "importPath": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "def webdevicons(pl, segment_info):\n\twebdevicons = vim_get_func('WebDevIconsGetFileTypeSymbol')\n\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],\n\t\t}]\n@requires_segment_info\ndef webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')",
        "detail": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "webdevicons_file_format",
        "kind": 2,
        "importPath": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "def webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{\n\t\t'contents': webdevicons_file_format(),\n\t\t'highlight_groups': ['webdevicons_file_format', 'file_format'],\n\t\t}]",
        "detail": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\tvim",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\tvim = {}\nfrom powerline.bindings.vim import (vim_get_func, buffer_name)\nfrom powerline.theme import requires_segment_info\n@requires_segment_info\ndef webdevicons(pl, segment_info):\n\twebdevicons = vim_get_func('WebDevIconsGetFileTypeSymbol')\n\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],",
        "detail": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\twebdevicons",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\twebdevicons = vim_get_func('WebDevIconsGetFileTypeSymbol')\n\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],\n\t\t}]\n@requires_segment_info\ndef webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{",
        "detail": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],\n\t\t}]\n@requires_segment_info\ndef webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{\n\t\t'contents': webdevicons_file_format(),",
        "detail": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\twebdevicons_file_format",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{\n\t\t'contents': webdevicons_file_format(),\n\t\t'highlight_groups': ['webdevicons_file_format', 'file_format'],\n\t\t}]",
        "detail": "nvim.bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "class Filter(Base):\n\tdef __init__(self, vim):\n\t\tsuper().__init__(vim)\n\t\tself.name = 'devicons_denite_converter'\n\t\tself.description = 'add devicons in front of candidates'\n\tdef filter(self, context):\n\t\tfor candidate in context['candidates']:\n\t\t\tif 'bufnr' in candidate:\n\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\tself.name",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\tself.name = 'devicons_denite_converter'\n\t\tself.description = 'add devicons in front of candidates'\n\tdef filter(self, context):\n\t\tfor candidate in context['candidates']:\n\t\t\tif 'bufnr' in candidate:\n\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\tself.description",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\tself.description = 'add devicons in front of candidates'\n\tdef filter(self, context):\n\t\tfor candidate in context['candidates']:\n\t\t\tif 'bufnr' in candidate:\n\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tbufname",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfilename",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfilename",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\ticon",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcandidate['abbr']",
        "kind": 5,
        "importPath": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "nvim.bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "nvim.bundle.vim-go.rplugin.python3.denite.source.decls",
        "description": "nvim.bundle.vim-go.rplugin.python3.denite.source.decls",
        "peekOfCode": "class Source(Base):\n    def __init__(self, vim):\n        super().__init__(vim)\n        self.name = 'decls'\n        self.kind = 'file'\n    def gather_candidates(self, context):\n        bin_path = self.vim.call('go#path#CheckBinPath', 'motion')\n        if bin_path == '':\n            return []\n        expand = context['args'][0] if context['args'] else '%:p:h'",
        "detail": "nvim.bundle.vim-go.rplugin.python3.denite.source.decls",
        "documentation": {}
    },
    {
        "label": "DECLS_SYNTAX_HIGHLIGHT",
        "kind": 5,
        "importPath": "nvim.bundle.vim-go.rplugin.python3.denite.source.decls",
        "description": "nvim.bundle.vim-go.rplugin.python3.denite.source.decls",
        "peekOfCode": "DECLS_SYNTAX_HIGHLIGHT = [\n    {'name': 'FilePath', 're': r'[^:]*\\ze:', 'link': 'Comment'},\n    {'name': 'Line', 're': r'\\d\\+\\ze :', 'link': 'LineNr'},\n    {'name': 'WholeFunction', 're': r'\\vfunc %(\\([^)]+\\) )?[^(]+'},\n    {'name': 'Function', 'parent': 'WholeFunction',\n     're': r'\\S\\+\\ze(', 'link': 'Function'},\n    {'name': 'WholeType', 're': r'type \\S\\+'},\n    {'name': 'Type', 'parent': 'WholeType',\n     're': r'\\v( )@<=\\S+', 'link': 'Type'},\n    {'name': 'Separator', 're': r':', 'conceal': True},",
        "detail": "nvim.bundle.vim-go.rplugin.python3.denite.source.decls",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_args_mixed.args_mixed",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_args_mixed.args_mixed",
        "peekOfCode": "def hello(a, *, example=False, **kwargs):\n    print(\"hello world\", example)\ndef i18n_patterns(*urls, prefix_default_language=True):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_args_mixed.args_mixed",
        "documentation": {}
    },
    {
        "label": "i18n_patterns",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_args_mixed.args_mixed",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_args_mixed.args_mixed",
        "peekOfCode": "def i18n_patterns(*urls, prefix_default_language=True):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_args_mixed.args_mixed",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "peekOfCode": "width = 10\nprecision = 4\nvalue = decimal.Decimal(\"12.34567\")\nf\"result: {value:{width}.{precision}}\"\nrf\"result: {value:{width}.{precision}}\"\nfoo(f'this SHOULD be a multi-line string because it is '\n    f'very long and does not fit on one line. And {value} is the value.')\nfoo('this SHOULD be a multi-line string, but not reflowed because it is '\n    f'very long and and also unusual. And {value} is the value.')\nfoo(fR\"this should NOT be \\t \"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "documentation": {}
    },
    {
        "label": "precision",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "peekOfCode": "precision = 4\nvalue = decimal.Decimal(\"12.34567\")\nf\"result: {value:{width}.{precision}}\"\nrf\"result: {value:{width}.{precision}}\"\nfoo(f'this SHOULD be a multi-line string because it is '\n    f'very long and does not fit on one line. And {value} is the value.')\nfoo('this SHOULD be a multi-line string, but not reflowed because it is '\n    f'very long and and also unusual. And {value} is the value.')\nfoo(fR\"this should NOT be \\t \"\n    rF'a multi-line string \\n')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "peekOfCode": "value = decimal.Decimal(\"12.34567\")\nf\"result: {value:{width}.{precision}}\"\nrf\"result: {value:{width}.{precision}}\"\nfoo(f'this SHOULD be a multi-line string because it is '\n    f'very long and does not fit on one line. And {value} is the value.')\nfoo('this SHOULD be a multi-line string, but not reflowed because it is '\n    f'very long and and also unusual. And {value} is the value.')\nfoo(fR\"this should NOT be \\t \"\n    rF'a multi-line string \\n')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_f_strings.f_strings",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_kwargs_only.kwargs_only",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_kwargs_only.kwargs_only",
        "peekOfCode": "def hello(a, *, delete=False):\n    print(\"hello world\", delete)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_kwargs_only.kwargs_only",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_nonlocal.nonlocal",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_nonlocal.nonlocal",
        "peekOfCode": "def outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    print(\"outer:\", x)\nouter()\nprint(\"global:\", x)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_nonlocal.nonlocal",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_nonlocal.nonlocal",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_nonlocal.nonlocal",
        "peekOfCode": "x = 0\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    print(\"outer:\", x)\nouter()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python3_nonlocal.nonlocal",
        "documentation": {}
    },
    {
        "label": "MyThing",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "peekOfCode": "class MyThing:\n    pass\ndef hello(a: int, b: str, c: Optional[MyThing]) -> None:\n    pass\ndef long_annotation(my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyLongTypeNameAAAAAAAAAAAAAAAAAAAAA) -> None:\n    pass\ndef ellipses(arg:Tuple[str,...])->Optional[Tuple[str,...]]:\n    return None\ndef default_args(verbose: bool=False):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "peekOfCode": "def hello(a: int, b: str, c: Optional[MyThing]) -> None:\n    pass\ndef long_annotation(my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyLongTypeNameAAAAAAAAAAAAAAAAAAAAA) -> None:\n    pass\ndef ellipses(arg:Tuple[str,...])->Optional[Tuple[str,...]]:\n    return None\ndef default_args(verbose: bool=False):\n    pass\ndef annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyTypeName = my_long_default_value_aa",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "documentation": {}
    },
    {
        "label": "long_annotation",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "peekOfCode": "def long_annotation(my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyLongTypeNameAAAAAAAAAAAAAAAAAAAAA) -> None:\n    pass\ndef ellipses(arg:Tuple[str,...])->Optional[Tuple[str,...]]:\n    return None\ndef default_args(verbose: bool=False):\n    pass\ndef annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyTypeName = my_long_default_value_aa\n):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "documentation": {}
    },
    {
        "label": "ellipses",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "peekOfCode": "def ellipses(arg:Tuple[str,...])->Optional[Tuple[str,...]]:\n    return None\ndef default_args(verbose: bool=False):\n    pass\ndef annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyTypeName = my_long_default_value_aa\n):\n    pass\ndef long_annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "peekOfCode": "def default_args(verbose: bool=False):\n    pass\ndef annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyTypeName = my_long_default_value_aa\n):\n    pass\ndef long_annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa:\n        MyLongTypeNameAAAAAAAAAAAAAAAAAAAAA = my_long_default_value_aaaaaaaaaaaaaa\n):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "documentation": {}
    },
    {
        "label": "annotation_with_long_default",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "peekOfCode": "def annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa: MyTypeName = my_long_default_value_aa\n):\n    pass\ndef long_annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa:\n        MyLongTypeNameAAAAAAAAAAAAAAAAAAAAA = my_long_default_value_aaaaaaaaaaaaaa\n):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "documentation": {}
    },
    {
        "label": "long_annotation_with_long_default",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "peekOfCode": "def long_annotation_with_long_default(\n    my_long_variable_name_aaaaaaaaaaaaaaaaaaa:\n        MyLongTypeNameAAAAAAAAAAAAAAAAAAAAA = my_long_default_value_aaaaaaaaaaaaaa\n):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_arg_annotations.args_annotations",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_args.args",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_args.args",
        "peekOfCode": "def hello(*args):\n    print(\"hello world\", args)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_args.args",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_args_mixed.args_mixed",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_args_mixed.args_mixed",
        "peekOfCode": "def hello(a, example=False, **kwargs):\n    print(\"hello world\", example)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_args_mixed.args_mixed",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "peekOfCode": "a = 12\nb = 14\na, b = b, a\na = b, c = 1, 2\na = b = 1, 2\nnew_file_name = file_name[:-6] + extension",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "peekOfCode": "b = 14\na, b = b, a\na = b, c = 1, 2\na = b = 1, 2\nnew_file_name = file_name[:-6] + extension",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "peekOfCode": "a = b, c = 1, 2\na = b = 1, 2\nnew_file_name = file_name[:-6] + extension",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "peekOfCode": "a = b = 1, 2\nnew_file_name = file_name[:-6] + extension",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "documentation": {}
    },
    {
        "label": "new_file_name",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "peekOfCode": "new_file_name = file_name[:-6] + extension",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_assign.assign",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_attributes.attributes",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_attributes.attributes",
        "peekOfCode": "query = (\n    'select count(*) from nodes '\n    'where count = {count}'\n).format(count=2)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_attributes.attributes",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_aug_assign.aug_assign",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_aug_assign.aug_assign",
        "peekOfCode": "a = 10\na += 10\na -= 1\na *= 1\na /= 1\na //= 1\na %= 1\na **= 1\na <<= 1\na >>= 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_aug_assign.aug_assign",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_indented.blank_lines_indented",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_indented.blank_lines_indented",
        "peekOfCode": "def f():\n    a = 1\n    a = 1\n    a = 1\n    a = 1\n    a = 1\n    a = 1\n    a = 1\n    a = 1\n    def g():",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_indented.blank_lines_indented",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "class a:\n    pass\nclass a:\n    pass\nclass a:\n    pass\nclass a:\n    pass\nA = 1\nclass a:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "class a:\n    pass\nclass a:\n    pass\nclass a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "class a:\n    pass\nclass a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1\nclass a:\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "class a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1\nclass a:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "class a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "class a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "class a:\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "def a():\n    pass\ndef a():\n    pass\ndef a():\n    pass\ndef a():\n    pass\nA = 1\ndef a():",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "def a():\n    pass\ndef a():\n    pass\ndef a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "def a():\n    pass\ndef a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\ndef a():\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "def a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\ndef a():",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "def a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "def a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\nA = 1\nclass a:\n    pass\nclass a:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "def a():\n    pass\nA = 1\nA = 1\nclass a:\n    pass\nclass a:\n    pass\nclass a:\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nA = 1\nA = 1\nA = 1\nA = 1\nA = 1\ndef a():\n    pass\ndef a():\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nA = 1\nA = 1\nA = 1\nA = 1\ndef a():\n    pass\ndef a():\n    pass\ndef a():",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nA = 1\nA = 1\nA = 1\ndef a():\n    pass\ndef a():\n    pass\ndef a():\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nA = 1\nA = 1\ndef a():\n    pass\ndef a():\n    pass\ndef a():\n    pass\ndef a():",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nA = 1\ndef a():\n    pass\ndef a():\n    pass\ndef a():\n    pass\ndef a():\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\ndef a():\n    pass\ndef a():\n    pass\ndef a():\n    pass\ndef a():\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\ndef a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\ndef a():\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\ndef a():\n    pass\nA = 1\ndef a():\n    pass\nA = 1\nA = 1\nclass a:\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\ndef a():\n    pass\nA = 1\nA = 1\nclass a:\n    pass\nclass a:\n    pass\nclass a:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nA = 1\nclass a:\n    pass\nclass a:\n    pass\nclass a:\n    pass\nclass a:\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nclass a:\n    pass\nclass a:\n    pass\nclass a:\n    pass\nclass a:\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nclass a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1\nclass a:\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nclass a:\n    pass\nA = 1\nclass a:\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1\nclass a:\n    pass\nA = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "peekOfCode": "A = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_blank_lines_top_level.blank_lines_top_level",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_call_mixed.call_mixed",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_call_mixed.call_mixed",
        "peekOfCode": "args = (1, 2, 3, 4)\nkwargs = {'var_f': 7}\nmy_func_with_many_args(0, *args, var_e=5, var_j=6, **kwargs)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_call_mixed.call_mixed",
        "documentation": {}
    },
    {
        "label": "kwargs",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_call_mixed.call_mixed",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_call_mixed.call_mixed",
        "peekOfCode": "kwargs = {'var_f': 7}\nmy_func_with_many_args(0, *args, var_e=5, var_j=6, **kwargs)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_call_mixed.call_mixed",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_class.class",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_class.class",
        "peekOfCode": "class BankAccount(object):\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_class.class",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_compare.compare",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_compare.compare",
        "peekOfCode": "x = 10\ny = 12\nx < 11 < y < 100\nx > y\nx < y\nx == y\nx != y\nx >= y\nx <= y",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_compare.compare",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_compare.compare",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_compare.compare",
        "peekOfCode": "y = 12\nx < 11 < y < 100\nx > y\nx < y\nx == y\nx != y\nx >= y\nx <= y",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_compare.compare",
        "documentation": {}
    },
    {
        "label": "UserStream",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_decorators.decorators",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_decorators.decorators",
        "peekOfCode": "class UserStream(EventStream):\n    def stream_request(self):\n        return self.stream.statuses.filter.post(track=\"#europython,europython\")\n    @events.on_connect.handler\n    @events.on_tweet.handler\n    def tweet(self, data):\n        if data.retweeted or 'RT @' in data.text:\n            return",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_decorators.decorators",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_default_args.default_args",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_default_args.default_args",
        "peekOfCode": "def hello(x, a=123, b = 456):\n    print(\"hello world\", a)\ndef my_func_with_many_args(self, var_a, var_b, var_c, var_d, var_e=None, var_f=None,\n                        var_g=None, var_h=None, var_i=None, var_j=None):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_default_args.default_args",
        "documentation": {}
    },
    {
        "label": "my_func_with_many_args",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_default_args.default_args",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_default_args.default_args",
        "peekOfCode": "def my_func_with_many_args(self, var_a, var_b, var_c, var_d, var_e=None, var_f=None,\n                        var_g=None, var_h=None, var_i=None, var_j=None):\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_default_args.default_args",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "peekOfCode": "a = {\n    \"a\": 123,\n    'b':\n        345\n}\na = {\n    \"a\": 123,\n    'b': 345,\n    'c': 345,\n    'd': 345,",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "peekOfCode": "a = {\n    \"a\": 123,\n    'b': 345,\n    'c': 345,\n    'd': 345,\n    'e': 345,\n    'f': 345,\n    'g': 345,\n    'hhhhhhhhhhhhhh':\n        345,",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "peekOfCode": "a = {\n}\na = {}\na = {\n    'short_key_1': 1,\n    'really_long_key_1_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa': 'really_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n    'short_key_2': 1,\n    'really_long_key_2_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa': 'really_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "peekOfCode": "a = {}\na = {\n    'short_key_1': 1,\n    'really_long_key_1_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa': 'really_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n    'short_key_2': 1,\n    'really_long_key_2_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa': 'really_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "peekOfCode": "a = {\n    'short_key_1': 1,\n    'really_long_key_1_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa': 'really_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n    'short_key_2': 1,\n    'really_long_key_2_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa': 'really_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict.dict",
        "documentation": {}
    },
    {
        "label": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "peekOfCode": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = {thing: 1 for thing in things}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things}\na = {my_long_key_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing): my_long_val_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "peekOfCode": "a = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things}\na = {my_long_key_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing): my_long_val_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "peekOfCode": "a = {my_long_key_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing): my_long_val_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "peekOfCode": "a = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None}\na = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "peekOfCode": "a = {thing: my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_dict_comp.dict_comp",
        "documentation": {}
    },
    {
        "label": "Pdb",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "class Pdb(bdb.Bdb, cmd.Cmd): pass\nclass A: pass\ndef foo(): return 1\nclass Foo: pass\nclass Foo: \"foo\"\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    return 1\ndef foo():\n    \"\"\"foo docstring\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "class A: pass\ndef foo(): return 1\nclass Foo: pass\nclass Foo: \"foo\"\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    return 1\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    a = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "class Foo: pass\nclass Foo: \"foo\"\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    return 1\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    a = 1\n    \"\"\"bar\"\"\"\n    return a",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "class Foo: \"foo\"\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    return 1\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    a = 1\n    \"\"\"bar\"\"\"\n    return a\n# def foo():",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(): return 1\ndef f(x): return x+1\ndef f(x,y): return x+y\ndef f(x,y=1,z=t): return x+y\ndef f(x,y=1,z=t,*args,**kwargs): return x+y\ndef f(x,y=1,z=t,*args): return x+y\ndef f(x,y=1,z=t,**kwargs): return x+y\ndef f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(x): return x+1\ndef f(x,y): return x+y\ndef f(x,y=1,z=t): return x+y\ndef f(x,y=1,z=t,*args,**kwargs): return x+y\ndef f(x,y=1,z=t,*args): return x+y\ndef f(x,y=1,z=t,**kwargs): return x+y\ndef f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(x,y): return x+y\ndef f(x,y=1,z=t): return x+y\ndef f(x,y=1,z=t,*args,**kwargs): return x+y\ndef f(x,y=1,z=t,*args): return x+y\ndef f(x,y=1,z=t,**kwargs): return x+y\ndef f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass\n# def f(a, b, (c, (d, e), f, (g, h))): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(x,y=1,z=t): return x+y\ndef f(x,y=1,z=t,*args,**kwargs): return x+y\ndef f(x,y=1,z=t,*args): return x+y\ndef f(x,y=1,z=t,**kwargs): return x+y\ndef f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass\n# def f(a, b, (c, (d, e), f, (g, h))): pass\n# def f(a, b, (c, (d, e), f, (g, h)), i): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(x,y=1,z=t,*args,**kwargs): return x+y\ndef f(x,y=1,z=t,*args): return x+y\ndef f(x,y=1,z=t,**kwargs): return x+y\ndef f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass\n# def f(a, b, (c, (d, e), f, (g, h))): pass\n# def f(a, b, (c, (d, e), f, (g, h)), i): pass\n# def f((a)): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(x,y=1,z=t,*args): return x+y\ndef f(x,y=1,z=t,**kwargs): return x+y\ndef f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass\n# def f(a, b, (c, (d, e), f, (g, h))): pass\n# def f(a, b, (c, (d, e), f, (g, h)), i): pass\n# def f((a)): pass\nclass Pdb(bdb.Bdb, cmd.Cmd): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(x,y=1,z=t,**kwargs): return x+y\ndef f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass\n# def f(a, b, (c, (d, e), f, (g, h))): pass\n# def f(a, b, (c, (d, e), f, (g, h)), i): pass\n# def f((a)): pass\nclass Pdb(bdb.Bdb, cmd.Cmd): pass\nclass A: pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(*args): return 1\ndef f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass\n# def f(a, b, (c, (d, e), f, (g, h))): pass\n# def f(a, b, (c, (d, e), f, (g, h)), i): pass\n# def f((a)): pass\nclass Pdb(bdb.Bdb, cmd.Cmd): pass\nclass A: pass\ndef foo(): return 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(**kwargs): return 1\n# def f(t=()): pass\n# def f(a, b, (c, d), e): pass\n# def f(a, b, (c, (d, e), f, (g, h))): pass\n# def f(a, b, (c, (d, e), f, (g, h)), i): pass\n# def f((a)): pass\nclass Pdb(bdb.Bdb, cmd.Cmd): pass\nclass A: pass\ndef foo(): return 1\nclass Foo: pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def foo(): return 1\nclass Foo: pass\nclass Foo: \"foo\"\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    return 1\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    a = 1\n    \"\"\"bar\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def foo():\n    \"\"\"foo docstring\"\"\"\n    return 1\ndef foo():\n    \"\"\"foo docstring\"\"\"\n    a = 1\n    \"\"\"bar\"\"\"\n    return a\n# def foo():\n#     \"\"\"doc\"\"\"; print 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def foo():\n    \"\"\"foo docstring\"\"\"\n    a = 1\n    \"\"\"bar\"\"\"\n    return a\n# def foo():\n#     \"\"\"doc\"\"\"; print 1\n#     a=1\n# \"\"\"Docstring\"\"\";print 1\ndef f(): return",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(): return\ndef f(): return 1\ndef f(): return a.b\ndef f(): return a\ndef f(): return a,b,c,d\na=1;a+=2\na=1;a-=2\na=1;a*=2\na=1;a/=2\na=1;a//=2",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(): return 1\ndef f(): return a.b\ndef f(): return a\ndef f(): return a,b,c,d\na=1;a+=2\na=1;a-=2\na=1;a*=2\na=1;a/=2\na=1;a//=2\na=1;a%=2",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(): return a.b\ndef f(): return a\ndef f(): return a,b,c,d\na=1;a+=2\na=1;a-=2\na=1;a*=2\na=1;a/=2\na=1;a//=2\na=1;a%=2\na=1;a**=2",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(): return a\ndef f(): return a,b,c,d\na=1;a+=2\na=1;a-=2\na=1;a*=2\na=1;a/=2\na=1;a//=2\na=1;a%=2\na=1;a**=2\na=1;a>>=2",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "def f(): return a,b,c,d\na=1;a+=2\na=1;a-=2\na=1;a*=2\na=1;a/=2\na=1;a//=2\na=1;a%=2\na=1;a**=2\na=1;a>>=2\na=1;a<<=2",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a + 1\nx = 1 - a\nx = a * b\nx = a ** 2\nx = a / b\nx = a & b\nx = a | b\nx = a ^ b\nx = a // b\nx = a * b + 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = 1 - a\nx = a * b\nx = a ** 2\nx = a / b\nx = a & b\nx = a | b\nx = a ^ b\nx = a // b\nx = a * b + 1\nx = a + 1 * b",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a * b\nx = a ** 2\nx = a / b\nx = a & b\nx = a | b\nx = a ^ b\nx = a // b\nx = a * b + 1\nx = a + 1 * b\nx = a * b / c",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a ** 2\nx = a / b\nx = a & b\nx = a | b\nx = a ^ b\nx = a // b\nx = a * b + 1\nx = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a / b\nx = a & b\nx = a | b\nx = a ^ b\nx = a // b\nx = a * b + 1\nx = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a & b\nx = a | b\nx = a ^ b\nx = a // b\nx = a * b + 1\nx = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3\n# x = 'a' 'b' 'c'",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a | b\nx = a ^ b\nx = a // b\nx = a * b + 1\nx = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3\n# x = 'a' 'b' 'c'\n# del foo",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a ^ b\nx = a // b\nx = a * b + 1\nx = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3\n# x = 'a' 'b' 'c'\n# del foo\n# del foo[bar]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a // b\nx = a * b + 1\nx = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3\n# x = 'a' 'b' 'c'\n# del foo\n# del foo[bar]\n# del foo.bar",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a * b + 1\nx = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3\n# x = 'a' 'b' 'c'\n# del foo\n# del foo[bar]\n# del foo.bar\nl[0]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a + 1 * b\nx = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3\n# x = 'a' 'b' 'c'\n# del foo\n# del foo[bar]\n# del foo.bar\nl[0]\nk[v,]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a * b / c\n# x = a * (1 + c)\nx, y, z = 1, 2, 3\n# x = 'a' 'b' 'c'\n# del foo\n# del foo[bar]\n# del foo.bar\nl[0]\nk[v,]\nm[a,b]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l[start:end]",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l[start:end] = l2\n# l[::] = l2\n# a = `s`\n# a = `1 + 2 + f(3, 4)`\n[a, b] = c\n# (a, b) = c\n[a, (b,c), d] = e\na, (b, c), d = e\n1 if True else 2\n1 if False else 2",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = func()\nl = func(10)\n# l = func(10, 12, a, b=c, *args)\n# l = func(10, 12, a, b=c, **kwargs)\n# l = func(10, 12, a, b=c, *args, **kwargs)\nl = func(10, 12, a, b=c)\ne = l.pop(3)\ne = k.l.pop(3)\nl = []\nl = [1, 2, 3]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = func(10)\n# l = func(10, 12, a, b=c, *args)\n# l = func(10, 12, a, b=c, **kwargs)\n# l = func(10, 12, a, b=c, *args, **kwargs)\nl = func(10, 12, a, b=c)\ne = l.pop(3)\ne = k.l.pop(3)\nl = []\nl = [1, 2, 3]\nl = [i for i in range(10)]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = func(10, 12, a, b=c)\ne = l.pop(3)\ne = k.l.pop(3)\nl = []\nl = [1, 2, 3]\nl = [i for i in range(10)]\nl = [i for i in range(10) if i%2 == 0]\nl = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "e = l.pop(3)\ne = k.l.pop(3)\nl = []\nl = [1, 2, 3]\nl = [i for i in range(10)]\nl = [i for i in range(10) if i%2 == 0]\nl = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "e = k.l.pop(3)\nl = []\nl = [1, 2, 3]\nl = [i for i in range(10)]\nl = [i for i in range(10) if i%2 == 0]\nl = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = []\nl = [1, 2, 3]\nl = [i for i in range(10)]\nl = [i for i in range(10) if i%2 == 0]\nl = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [1, 2, 3]\nl = [i for i in range(10)]\nl = [i for i in range(10) if i%2 == 0]\nl = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [i for i in range(10)]\nl = [i for i in range(10) if i%2 == 0]\nl = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]\n# https://github.com/prettier/prettier-python/issues/18",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [i for i in range(10) if i%2 == 0]\nl = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]\n# https://github.com/prettier/prettier-python/issues/18\n# l = [i for j in k if j%2 == 0 if j*2 < 20 for i in j if i%2==0]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [i for i in range(10) if i%2 == 0 or i%2 == 1]\nl = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]\n# https://github.com/prettier/prettier-python/issues/18\n# l = [i for j in k if j%2 == 0 if j*2 < 20 for i in j if i%2==0]\n# l = (i for i in j)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [i for i in range(10) if i%2 == 0 and i%2 == 1]\nl = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]\n# https://github.com/prettier/prettier-python/issues/18\n# l = [i for j in k if j%2 == 0 if j*2 < 20 for i in j if i%2==0]\n# l = (i for i in j)\n# l = (i for i in j if i%2 == 0)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [i for j in range(10) for i in range(j)]\nl = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]\n# https://github.com/prettier/prettier-python/issues/18\n# l = [i for j in k if j%2 == 0 if j*2 < 20 for i in j if i%2==0]\n# l = (i for i in j)\n# l = (i for i in j if i%2 == 0)\n# l = (i for j in k for i in j)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [i for j in range(10) for i in range(j) if j%2 == 0]\nl = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]\n# https://github.com/prettier/prettier-python/issues/18\n# l = [i for j in k if j%2 == 0 if j*2 < 20 for i in j if i%2==0]\n# l = (i for i in j)\n# l = (i for i in j if i%2 == 0)\n# l = (i for j in k for i in j)\n# l = (i for j in k for i in j if j%2==0)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = [i for j in range(10) for i in range(j) if j%2 == 0 and i%2 == 0]\n# l = [(a, b) for (a,b,c) in l2]\n# l = [{a:b} for (a,b,c) in l2]\n# https://github.com/prettier/prettier-python/issues/18\n# l = [i for j in k if j%2 == 0 if j*2 < 20 for i in j if i%2==0]\n# l = (i for i in j)\n# l = (i for i in j if i%2 == 0)\n# l = (i for j in k for i in j)\n# l = (i for j in k for i in j if j%2==0)\n# l = (i for j in k if j%2 == 0 if j*2 < 20 for i in j if i%2==0)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = {a : b, 'c' : 0}\nl = {}\nf = lambda x: x+1\nf = lambda x,y: x+y\nf = lambda x,y=1,z=t: x+y\nf = lambda x,y=1,z=t,*args,**kwargs: x+y\nf = lambda x,y=1,z=t,*args: x+y\nf = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "l = {}\nf = lambda x: x+1\nf = lambda x,y: x+y\nf = lambda x,y=1,z=t: x+y\nf = lambda x,y=1,z=t,*args,**kwargs: x+y\nf = lambda x,y=1,z=t,*args: x+y\nf = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda x: x+1\nf = lambda x,y: x+y\nf = lambda x,y=1,z=t: x+y\nf = lambda x,y=1,z=t,*args,**kwargs: x+y\nf = lambda x,y=1,z=t,*args: x+y\nf = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1\na < b",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda x,y: x+y\nf = lambda x,y=1,z=t: x+y\nf = lambda x,y=1,z=t,*args,**kwargs: x+y\nf = lambda x,y=1,z=t,*args: x+y\nf = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1\na < b\na > b",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda x,y=1,z=t: x+y\nf = lambda x,y=1,z=t,*args,**kwargs: x+y\nf = lambda x,y=1,z=t,*args: x+y\nf = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1\na < b\na > b\na not in b",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda x,y=1,z=t,*args,**kwargs: x+y\nf = lambda x,y=1,z=t,*args: x+y\nf = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1\na < b\na > b\na not in b\na is not b",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda x,y=1,z=t,*args: x+y\nf = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1\na < b\na > b\na not in b\na is not b\na in b",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda x,y=1,z=t,**kwargs: x+y\nf = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1\na < b\na > b\na not in b\na is not b\na in b\na is b",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda: 1\nf = lambda *args: 1\nf = lambda **kwargs: 1\na < b\na > b\na not in b\na is not b\na in b\na is b\nnot a",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda *args: 1\nf = lambda **kwargs: 1\na < b\na > b\na not in b\na is not b\na in b\na is b\nnot a\n# We don't wrap this because it doesn't make sense with a 4-space indent.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "f = lambda **kwargs: 1\na < b\na > b\na not in b\na is not b\na in b\na is b\nnot a\n# We don't wrap this because it doesn't make sense with a 4-space indent.\nnot my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "a = b; c = d;\n# a = b = c = d\na.b = 2\nx = a.b\n# l[:]\n# l[::]\nl[1:2]\n# l[1:]\nl[:2]\n# l[1::]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "a.b",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "a.b = 2\nx = a.b\n# l[:]\n# l[::]\nl[1:2]\n# l[1:]\nl[:2]\n# l[1::]\n# l[:1:]\nl[::1]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "peekOfCode": "x = a.b\n# l[:]\n# l[::]\nl[1:2]\n# l[1:]\nl[:2]\n# l[1::]\n# l[:1:]\nl[::1]\n# l[1:2:]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_expressions.expressions",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_float.float",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_float.float",
        "peekOfCode": "b = 3.75",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_float.float",
        "documentation": {}
    },
    {
        "label": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "peekOfCode": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = (thing for thing in things)\na = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things)\na = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None)\na = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing))\nlist(x for x in bar)\nfoo((x for x in bar), True)\nfoo(True, (x for x in bar))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "peekOfCode": "a = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things)\na = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None)\na = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing))\nlist(x for x in bar)\nfoo((x for x in bar), True)\nfoo(True, (x for x in bar))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "peekOfCode": "a = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None)\na = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing))\nlist(x for x in bar)\nfoo((x for x in bar), True)\nfoo(True, (x for x in bar))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "peekOfCode": "a = (my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing))\nlist(x for x in bar)\nfoo((x for x in bar), True)\nfoo(True, (x for x in bar))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_generator_expressions.generator_expressions",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_hello.hello",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_hello.hello",
        "peekOfCode": "def hello(x, y):\n    print(\"hello world\", x, y)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_hello.hello",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_inline_comments.inline_comments",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_inline_comments.inline_comments",
        "peekOfCode": "message = (\n    \"hello {}\"  # comment\n).format(\"world\")",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_inline_comments.inline_comments",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_kwargs.kwargs",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_kwargs.kwargs",
        "peekOfCode": "def hello(a, **kwargs):\n    print(\"hello world\", a)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_kwargs.kwargs",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_lambdas.lambdas",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_lambdas.lambdas",
        "peekOfCode": "f = lambda param: some_very_long_variable_name_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nf = lambda some_very_long_param_name_1_aaaaaaaaaa, some_very_long_param_name_2_aaaaaaaaaa, some_very_long_param_name_3_aaaaaaaaaa: True",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_lambdas.lambdas",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_lambdas.lambdas",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_lambdas.lambdas",
        "peekOfCode": "f = lambda some_very_long_param_name_1_aaaaaaaaaa, some_very_long_param_name_2_aaaaaaaaaa, some_very_long_param_name_3_aaaaaaaaaa: True",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_lambdas.lambdas",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "peekOfCode": "a = [\n    \"a\",\n    'b'\n]\na = [\n    \"a\",\n    'b',\n    'c',\n    'd',\n    'e',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "peekOfCode": "a = [\n    \"a\",\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'hhhhhhhhhhhhhh',\n]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "peekOfCode": "a = ['aaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'cccccccccccccccccccccccccccc', 'dddddddddddddddddddddddddddd']",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list.list",
        "documentation": {}
    },
    {
        "label": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "peekOfCode": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = [thing for thing in things]\na = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things]\na = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None]\na = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "peekOfCode": "a = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things]\na = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None]\na = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "peekOfCode": "a = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None]\na = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "peekOfCode": "a = [my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_list_comp.list_comp",
        "documentation": {}
    },
    {
        "label": "this_is_a_long_function",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_long.hello",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_long.hello",
        "peekOfCode": "def this_is_a_long_function(this_is_a_long_parameter, this_is_another_long_parameter):\n    print(\"hello world\", this_is_another_long_parameter)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_long.hello",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_pass.pass",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_pass.pass",
        "peekOfCode": "class Client:\n    pass\ndef x(): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_pass.pass",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_pass.pass",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_pass.pass",
        "peekOfCode": "def x(): pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_pass.pass",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_print_width.print_width",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_print_width.print_width",
        "peekOfCode": "def foo():\n    return \"line_with_79_chars_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    return \"line_with_80_chars_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_print_width.print_width",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_return.return",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_return.return",
        "peekOfCode": "def example(first):\n    if False:\n        return\n    return first\ndef foo():\n    return my_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_return.return",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_return.return",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_return.return",
        "peekOfCode": "def foo():\n    return my_long_value_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_return.return",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "peekOfCode": "a = {\n    \"a\",\n    'b'\n}\na = {\n    \"a\",\n    'b',\n    'c',\n    'd',\n    'e',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "peekOfCode": "a = {\n    \"a\",\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'hhhhhhhhhhhhhh',\n}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "peekOfCode": "a = {'aaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'cccccccccccccccccccccccccccc', 'dddddddddddddddddddddddddddd'}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set.set",
        "documentation": {}
    },
    {
        "label": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "peekOfCode": "my_long_variable_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = {thing for thing in things}\na = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things}\na = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None}\na = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "peekOfCode": "a = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things}\na = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None}\na = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "peekOfCode": "a = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if thing is not None}\na = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "peekOfCode": "a = {my_long_function_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing) for thing in things if my_long_predicate_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(thing)}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_set_comp.set_comp",
        "documentation": {}
    },
    {
        "label": "point_coords",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_slices.list",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_slices.list",
        "peekOfCode": "point_coords = coords[i, :]\nmain(sys.argv[1:])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_slices.list",
        "documentation": {}
    },
    {
        "label": "_srid_cache",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_str_token.str_token",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_str_token.str_token",
        "peekOfCode": "_srid_cache = defaultdict(dict)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_str_token.str_token",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "def foo():\n    return (\n        \"this SHOULD be re-flowed, but still a multi-line string \"\n        \"because it is very long and does not fit on one line\"\n    )\nmy_dict[\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\"]\n\"this SHOULD remain a multi-line string \"\n\"it is very long and does not fit on one line\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = \"it is \\\"ok\\\"\"\na = \"it is 'ok'\"\na = 'it is \\'ok\\''\na = 'it is \"ok\"'\na = \"\"\"this is a multiline\nstring\"\"\"\nb = '''another multiline\nstring'''\na = \"both 'single' and \\\"double\\\"\"\na = 'both \\'single\\' and \"double\"'",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = \"it is 'ok'\"\na = 'it is \\'ok\\''\na = 'it is \"ok\"'\na = \"\"\"this is a multiline\nstring\"\"\"\nb = '''another multiline\nstring'''\na = \"both 'single' and \\\"double\\\"\"\na = 'both \\'single\\' and \"double\"'\na = u\"unicode snowman: \\u26C4\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = 'it is \\'ok\\''\na = 'it is \"ok\"'\na = \"\"\"this is a multiline\nstring\"\"\"\nb = '''another multiline\nstring'''\na = \"both 'single' and \\\"double\\\"\"\na = 'both \\'single\\' and \"double\"'\na = u\"unicode snowman: \\u26C4\"\na = r\"this does not have a tab: \\t\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = 'it is \"ok\"'\na = \"\"\"this is a multiline\nstring\"\"\"\nb = '''another multiline\nstring'''\na = \"both 'single' and \\\"double\\\"\"\na = 'both \\'single\\' and \"double\"'\na = u\"unicode snowman: \\u26C4\"\na = r\"this does not have a tab: \\t\"\na = b\"here's some bytes\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = \"\"\"this is a multiline\nstring\"\"\"\nb = '''another multiline\nstring'''\na = \"both 'single' and \\\"double\\\"\"\na = 'both \\'single\\' and \"double\"'\na = u\"unicode snowman: \\u26C4\"\na = r\"this does not have a tab: \\t\"\na = b\"here's some bytes\"\na = '''escaped triple quote \\''' in middle'''",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "b = '''another multiline\nstring'''\na = \"both 'single' and \\\"double\\\"\"\na = 'both \\'single\\' and \"double\"'\na = u\"unicode snowman: \\u26C4\"\na = r\"this does not have a tab: \\t\"\na = b\"here's some bytes\"\na = '''escaped triple quote \\''' in middle'''\na = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = \"both 'single' and \\\"double\\\"\"\na = 'both \\'single\\' and \"double\"'\na = u\"unicode snowman: \\u26C4\"\na = r\"this does not have a tab: \\t\"\na = b\"here's some bytes\"\na = '''escaped triple quote \\''' in middle'''\na = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = 'both \\'single\\' and \"double\"'\na = u\"unicode snowman: \\u26C4\"\na = r\"this does not have a tab: \\t\"\na = b\"here's some bytes\"\na = '''escaped triple quote \\''' in middle'''\na = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = u\"unicode snowman: \\u26C4\"\na = r\"this does not have a tab: \\t\"\na = b\"here's some bytes\"\na = '''escaped triple quote \\''' in middle'''\na = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = r\"this does not have a tab: \\t\"\na = b\"here's some bytes\"\na = '''escaped triple quote \\''' in middle'''\na = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly\n# a = '''both triple quotes \"\"\" and \\''' in the middle'''",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = b\"here's some bytes\"\na = '''escaped triple quote \\''' in middle'''\na = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly\n# a = '''both triple quotes \"\"\" and \\''' in the middle'''\n# a = \"\"\"both triple quotes ''' and \\\"\"\" in the middle\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = '''escaped triple quote \\''' in middle'''\na = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly\n# a = '''both triple quotes \"\"\" and \\''' in the middle'''\n# a = \"\"\"both triple quotes ''' and \\\"\"\" in the middle\"\"\"\n# In the future these might be re-flowed, if that's a feature we want to",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = \"\"\"escaped triple quote \\\"\"\" in middle\"\"\"\na = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly\n# a = '''both triple quotes \"\"\" and \\''' in the middle'''\n# a = \"\"\"both triple quotes ''' and \\\"\"\" in the middle\"\"\"\n# In the future these might be re-flowed, if that's a feature we want to\n# implement.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = \"\"\"other triple quote ''' in the middle\"\"\"\na = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly\n# a = '''both triple quotes \"\"\" and \\''' in the middle'''\n# a = \"\"\"both triple quotes ''' and \\\"\"\" in the middle\"\"\"\n# In the future these might be re-flowed, if that's a feature we want to\n# implement.\nfoo('this should NOT be '",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = '''other triple quote \"\"\" in the middle'''\na = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly\n# a = '''both triple quotes \"\"\" and \\''' in the middle'''\n# a = \"\"\"both triple quotes ''' and \\\"\"\" in the middle\"\"\"\n# In the future these might be re-flowed, if that's a feature we want to\n# implement.\nfoo('this should NOT be '\n    'a multi-line string')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "peekOfCode": "a = (\"this SHOULD be re-flowed, but still a multi-line string \"\n    \"because it is very long and does not fit on one line\")\n# The interior triple quotes don't get escaped properly\n# a = '''both triple quotes \"\"\" and \\''' in the middle'''\n# a = \"\"\"both triple quotes ''' and \\\"\"\" in the middle\"\"\"\n# In the future these might be re-flowed, if that's a feature we want to\n# implement.\nfoo('this should NOT be '\n    'a multi-line string')\nfoo(\"this should NOT be \"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_strings.strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_subscript.subscript",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_subscript.subscript",
        "peekOfCode": "a = [1, [2, 2], 3]\na[0]\na[0:1]\na[0:-1]\na[-1]\na[0:-1:2]\na[1][0]\na[::-1]\na[1:]\na[:1]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_subscript.subscript",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_subscript.subscript",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_subscript.subscript",
        "peekOfCode": "c = {'a': 3}\nc['a']",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_subscript.subscript",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "peekOfCode": "a = r\"it is \\ok\"\na = u\"it is ok\"\na = r\"\"\"this is a multiline\nstring\"\"\"\na = u\"\"\"this is a multiline\nstring\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "peekOfCode": "a = u\"it is ok\"\na = r\"\"\"this is a multiline\nstring\"\"\"\na = u\"\"\"this is a multiline\nstring\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "peekOfCode": "a = r\"\"\"this is a multiline\nstring\"\"\"\na = u\"\"\"this is a multiline\nstring\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "peekOfCode": "a = u\"\"\"this is a multiline\nstring\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tagged_strings.tagged_strings",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tuple.tuple",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tuple.tuple",
        "peekOfCode": "def f():\n    return (1, 2)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tuple.tuple",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tuple.tuple",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tuple.tuple",
        "peekOfCode": "a = (1,\n     2,\n     3)\ndef f():\n    return (1, 2)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_tuple.tuple",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "peekOfCode": "def example(first):\n    if False:\n        yield\n    yield first\ndef should_wrap():\n    yield very_long_variable_name_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ndef should_unwrap():\n    yield \\\n        short_variable_name",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "documentation": {}
    },
    {
        "label": "should_wrap",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "peekOfCode": "def should_wrap():\n    yield very_long_variable_name_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ndef should_unwrap():\n    yield \\\n        short_variable_name",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "documentation": {}
    },
    {
        "label": "should_unwrap",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "peekOfCode": "def should_unwrap():\n    yield \\\n        short_variable_name",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield.yield",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "peekOfCode": "def example(first):\n    yield from first\ndef should_wrap():\n    yield from very_long_variable_name_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ndef should_unwrap():\n    yield from \\\n        short_variable_name",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "documentation": {}
    },
    {
        "label": "should_wrap",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "peekOfCode": "def should_wrap():\n    yield from very_long_variable_name_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ndef should_unwrap():\n    yield from \\\n        short_variable_name",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "documentation": {}
    },
    {
        "label": "should_unwrap",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "peekOfCode": "def should_unwrap():\n    yield from \\\n        short_variable_name",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.tests.python_yield_from.yield_from",
        "documentation": {}
    },
    {
        "label": "ASTTokens",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.asttokens",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.asttokens",
        "peekOfCode": "class ASTTokens(object):\n  \"\"\"\n  ASTTokens maintains the text of Python code in several forms: as a string, as line numbers, and\n  as tokens, and is used to mark and access token and position information.\n  ``source_text`` must be a unicode or UTF8-encoded string. If you pass in UTF8 bytes, remember\n  that all offsets you'll get are to the unicode text, which is available as the ``.text``\n  property.\n  If ``parse`` is set, the ``source_text`` will be parsed with ``ast.parse()``, and the resulting\n  tree marked with token info and made available as the ``.tree`` property.\n  If ``tree`` is given, it will be marked and made available as the ``.tree`` property. In",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.asttokens",
        "documentation": {}
    },
    {
        "label": "LineNumbers",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.line_numbers",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.line_numbers",
        "peekOfCode": "class LineNumbers(object):\n  \"\"\"\n  Class to convert between character offsets in a text string, and pairs (line, column) of 1-based\n  line and 0-based column numbers, as used by tokens and AST nodes.\n  This class expects unicode for input and stores positions in unicode. But it supports\n  translating to and from utf8 offsets, which are used by ast parsing.\n  \"\"\"\n  def __init__(self, text):\n    # A list of character offsets of each line's first character.\n    self._line_offsets = [m.start(0) for m in _line_start_re.finditer(text)]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.line_numbers",
        "documentation": {}
    },
    {
        "label": "_line_start_re",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.line_numbers",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.line_numbers",
        "peekOfCode": "_line_start_re = re.compile(r'^', re.M)\nclass LineNumbers(object):\n  \"\"\"\n  Class to convert between character offsets in a text string, and pairs (line, column) of 1-based\n  line and 0-based column numbers, as used by tokens and AST nodes.\n  This class expects unicode for input and stores positions in unicode. But it supports\n  translating to and from utf8 offsets, which are used by ast parsing.\n  \"\"\"\n  def __init__(self, text):\n    # A list of character offsets of each line's first character.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.line_numbers",
        "documentation": {}
    },
    {
        "label": "MarkTokens",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "peekOfCode": "class MarkTokens(object):\n  \"\"\"\n  Helper that visits all nodes in the AST tree and assigns .first_token and .last_token attributes\n  to each of them. This is the heart of the token-marking logic.\n  \"\"\"\n  def __init__(self, code):\n    self._code = code\n    self._methods = util.NodeMethods()\n    self._iter_children = None\n  def visit_tree(self, node):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "documentation": {}
    },
    {
        "label": "_matching_pairs_left",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "peekOfCode": "_matching_pairs_left = {\n  (token.OP, '('): (token.OP, ')'),\n  (token.OP, '['): (token.OP, ']'),\n  (token.OP, '{'): (token.OP, '}'),\n}\n_matching_pairs_right = {\n  (token.OP, ')'): (token.OP, '('),\n  (token.OP, ']'): (token.OP, '['),\n  (token.OP, '}'): (token.OP, '{'),\n}",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "documentation": {}
    },
    {
        "label": "_matching_pairs_right",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "peekOfCode": "_matching_pairs_right = {\n  (token.OP, ')'): (token.OP, '('),\n  (token.OP, ']'): (token.OP, '['),\n  (token.OP, '}'): (token.OP, '{'),\n}\nclass MarkTokens(object):\n  \"\"\"\n  Helper that visits all nodes in the AST tree and assigns .first_token and .last_token attributes\n  to each of them. This is the heart of the token-marking logic.\n  \"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.mark_tokens",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "class Token(collections.namedtuple('Token', 'type string start end line index startpos endpos')):\n  \"\"\"\n  TokenInfo is an 8-tuple containing the same 5 fields as the tokens produced by the tokenize\n  module, and 3 additional ones useful for this module:\n  - [0] .type     Token type (see token.py)\n  - [1] .string   Token (a string)\n  - [2] .start    Starting (row, column) indices of the token (a 2-tuple of ints)\n  - [3] .end      Ending (row, column) indices of the token (a 2-tuple of ints)\n  - [4] .line     Original line (string)\n  - [5] .index    Index of the token in the list of tokens that it belongs to.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "NodeMethods",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "class NodeMethods(object):\n  \"\"\"\n  Helper to get `visit_{node_type}` methods given a node's class and cache the results.\n  \"\"\"\n  def __init__(self):\n    self._cache = {}\n  def get(self, obj, cls):\n    \"\"\"\n    Using the lowercase name of the class as node_type, returns `obj.visit_{node_type}`,\n    or `obj.visit_default` if the type-specific method is not found.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "token_repr",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def token_repr(tok_type, string):\n  \"\"\"Returns a human-friendly representation of a token with the given type and string.\"\"\"\n  # repr() prefixes unicode with 'u' on Python2 but not Python3; strip it out for consistency.\n  return '%s:%s' % (token.tok_name[tok_type], repr(string).lstrip('u'))\nclass Token(collections.namedtuple('Token', 'type string start end line index startpos endpos')):\n  \"\"\"\n  TokenInfo is an 8-tuple containing the same 5 fields as the tokens produced by the tokenize\n  module, and 3 additional ones useful for this module:\n  - [0] .type     Token type (see token.py)\n  - [1] .string   Token (a string)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "match_token",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def match_token(token, tok_type, tok_str=None):\n  \"\"\"Returns true if token is of the given type and, if a string is given, has that string.\"\"\"\n  return token.type == tok_type and (tok_str is None or token.string == tok_str)\ndef expect_token(token, tok_type, tok_str=None):\n  \"\"\"\n  Verifies that the given token is of the expected type. If tok_str is given, the token string\n  is verified too. If the token doesn't match, raises an informative ValueError.\n  \"\"\"\n  if not match_token(token, tok_type, tok_str):\n    raise ValueError(\"Expected token %s, got %s on line %s col %s\" % (",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "expect_token",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def expect_token(token, tok_type, tok_str=None):\n  \"\"\"\n  Verifies that the given token is of the expected type. If tok_str is given, the token string\n  is verified too. If the token doesn't match, raises an informative ValueError.\n  \"\"\"\n  if not match_token(token, tok_type, tok_str):\n    raise ValueError(\"Expected token %s, got %s on line %s col %s\" % (\n      token_repr(tok_type, tok_str), str(token),\n      token.start[0], token.start[1] + 1))\ndef iter_children(node):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "iter_children",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def iter_children(node):\n  \"\"\"\n  Yields all direct children of a AST node, skipping children that are singleton nodes.\n  \"\"\"\n  return iter_children_astroid(node) if hasattr(node, 'get_children') else iter_children_ast(node)\ndef iter_children_func(node):\n  \"\"\"\n  Returns a slightly more optimized function to use in place of ``iter_children``, depending on\n  whether ``node`` is from ``ast`` or from the ``astroid`` module.\n  \"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "iter_children_func",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def iter_children_func(node):\n  \"\"\"\n  Returns a slightly more optimized function to use in place of ``iter_children``, depending on\n  whether ``node`` is from ``ast`` or from the ``astroid`` module.\n  \"\"\"\n  return iter_children_astroid if hasattr(node, 'get_children') else iter_children_ast\ndef iter_children_astroid(node):\n  # Don't attempt to process children of JoinedStr nodes, which we can't fully handle yet.\n  if is_joined_str(node):\n    return []",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "iter_children_astroid",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def iter_children_astroid(node):\n  # Don't attempt to process children of JoinedStr nodes, which we can't fully handle yet.\n  if is_joined_str(node):\n    return []\n  return node.get_children()\nSINGLETONS = {c for n, c in iteritems(ast.__dict__) if isinstance(c, type) and\n              issubclass(c, (ast.expr_context, ast.boolop, ast.operator, ast.unaryop, ast.cmpop))}\ndef iter_children_ast(node):\n  # Don't attempt to process children of JoinedStr nodes, which we can't fully handle yet.\n  if is_joined_str(node):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "iter_children_ast",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def iter_children_ast(node):\n  # Don't attempt to process children of JoinedStr nodes, which we can't fully handle yet.\n  if is_joined_str(node):\n    return\n  for child in ast.iter_child_nodes(node):\n    # Skip singleton children; they don't reflect particular positions in the code and break the\n    # assumptions about the tree consisting of distinct nodes. Note that collecting classes\n    # beforehand and checking them in a set is faster than using isinstance each time.\n    if child.__class__ not in SINGLETONS:\n      yield child",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "is_expr",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def is_expr(node):\n  \"\"\"Returns whether node is an expression node.\"\"\"\n  return node.__class__.__name__ in expr_class_names\ndef is_stmt(node):\n  \"\"\"Returns whether node is a statement node.\"\"\"\n  return node.__class__.__name__ in stmt_class_names\ndef is_module(node):\n  \"\"\"Returns whether node is a module node.\"\"\"\n  return node.__class__.__name__ == 'Module'\ndef is_joined_str(node):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "is_stmt",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def is_stmt(node):\n  \"\"\"Returns whether node is a statement node.\"\"\"\n  return node.__class__.__name__ in stmt_class_names\ndef is_module(node):\n  \"\"\"Returns whether node is a module node.\"\"\"\n  return node.__class__.__name__ == 'Module'\ndef is_joined_str(node):\n  \"\"\"Returns whether node is a JoinedStr node, used to represent f-strings.\"\"\"\n  # At the moment, nodes below JoinedStr have wrong line/col info, and trying to process them only\n  # leads to errors.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "is_module",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def is_module(node):\n  \"\"\"Returns whether node is a module node.\"\"\"\n  return node.__class__.__name__ == 'Module'\ndef is_joined_str(node):\n  \"\"\"Returns whether node is a JoinedStr node, used to represent f-strings.\"\"\"\n  # At the moment, nodes below JoinedStr have wrong line/col info, and trying to process them only\n  # leads to errors.\n  return node.__class__.__name__ == 'JoinedStr'\n# Sentinel value used by visit_tree().\n_PREVISIT = object()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "is_joined_str",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def is_joined_str(node):\n  \"\"\"Returns whether node is a JoinedStr node, used to represent f-strings.\"\"\"\n  # At the moment, nodes below JoinedStr have wrong line/col info, and trying to process them only\n  # leads to errors.\n  return node.__class__.__name__ == 'JoinedStr'\n# Sentinel value used by visit_tree().\n_PREVISIT = object()\ndef visit_tree(node, previsit, postvisit):\n  \"\"\"\n  Scans the tree under the node depth-first using an explicit stack. It avoids implicit recursion",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "visit_tree",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def visit_tree(node, previsit, postvisit):\n  \"\"\"\n  Scans the tree under the node depth-first using an explicit stack. It avoids implicit recursion\n  via the function call stack to avoid hitting 'maximum recursion depth exceeded' error.\n  It calls ``previsit()`` and ``postvisit()`` as follows:\n  * ``previsit(node, par_value)`` - should return ``(par_value, value)``\n        ``par_value`` is as returned from ``previsit()`` of the parent.\n  * ``postvisit(node, par_value, value)`` - should return ``value``\n        ``par_value`` is as returned from ``previsit()`` of the parent, and ``value`` is as\n        returned from ``previsit()`` of this node itself. The return ``value`` is ignored except",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def walk(node):\n  \"\"\"\n  Recursively yield all descendant nodes in the tree starting at ``node`` (including ``node``\n  itself), using depth-first pre-order traversal (yieling parents before their children).\n  This is similar to ``ast.walk()``, but with a different order, and it works for both ``ast`` and\n  ``astroid`` trees. Also, as ``iter_children()``, it skips singleton nodes generated by ``ast``.\n  \"\"\"\n  iter_children = iter_children_func(node)\n  done = set()\n  stack = [node]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "replace",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "def replace(text, replacements):\n  \"\"\"\n  Replaces multiple slices of text with new values. This is a convenience method for making code\n  modifications of ranges e.g. as identified by ``ASTTokens.get_text_range(node)``. Replacements is\n  an iterable of ``(start, end, new_text)`` tuples.\n  For example, ``replace(\"this is a test\", [(0, 4, \"X\"), (8, 1, \"THE\")])`` produces\n  ``\"X is THE test\"``.\n  \"\"\"\n  p = 0\n  parts = []",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "SINGLETONS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "SINGLETONS = {c for n, c in iteritems(ast.__dict__) if isinstance(c, type) and\n              issubclass(c, (ast.expr_context, ast.boolop, ast.operator, ast.unaryop, ast.cmpop))}\ndef iter_children_ast(node):\n  # Don't attempt to process children of JoinedStr nodes, which we can't fully handle yet.\n  if is_joined_str(node):\n    return\n  for child in ast.iter_child_nodes(node):\n    # Skip singleton children; they don't reflect particular positions in the code and break the\n    # assumptions about the tree consisting of distinct nodes. Note that collecting classes\n    # beforehand and checking them in a set is faster than using isinstance each time.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "stmt_class_names",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "stmt_class_names = {n for n, c in iteritems(ast.__dict__)\n                    if isinstance(c, type) and issubclass(c, ast.stmt)}\nexpr_class_names = ({n for n, c in iteritems(ast.__dict__)\n                    if isinstance(c, type) and issubclass(c, ast.expr)} |\n                    {'AssignName', 'DelName', 'Const', 'AssignAttr', 'DelAttr'})\n# These feel hacky compared to isinstance() but allow us to work with both ast and astroid nodes\n# in the same way, and without even importing astroid.\ndef is_expr(node):\n  \"\"\"Returns whether node is an expression node.\"\"\"\n  return node.__class__.__name__ in expr_class_names",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "expr_class_names",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "expr_class_names = ({n for n, c in iteritems(ast.__dict__)\n                    if isinstance(c, type) and issubclass(c, ast.expr)} |\n                    {'AssignName', 'DelName', 'Const', 'AssignAttr', 'DelAttr'})\n# These feel hacky compared to isinstance() but allow us to work with both ast and astroid nodes\n# in the same way, and without even importing astroid.\ndef is_expr(node):\n  \"\"\"Returns whether node is an expression node.\"\"\"\n  return node.__class__.__name__ in expr_class_names\ndef is_stmt(node):\n  \"\"\"Returns whether node is a statement node.\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "_PREVISIT",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "peekOfCode": "_PREVISIT = object()\ndef visit_tree(node, previsit, postvisit):\n  \"\"\"\n  Scans the tree under the node depth-first using an explicit stack. It avoids implicit recursion\n  via the function call stack to avoid hitting 'maximum recursion depth exceeded' error.\n  It calls ``previsit()`` and ``postvisit()`` as follows:\n  * ``previsit(node, par_value)`` - should return ``(par_value, value)``\n        ``par_value`` is as returned from ``previsit()`` of the parent.\n  * ``postvisit(node, par_value, value)`` - should return ``value``\n        ``par_value`` is as returned from ``previsit()`` of the parent, and ``value`` is as",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.asttokens.util",
        "documentation": {}
    },
    {
        "label": "DictExportVisitor",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "peekOfCode": "class DictExportVisitor:\n    ast_type_field = \"ast_type\"\n    def __init__(self, atok):\n        self.atok = atok\n    def visit(self, node):\n        node_type = node.__class__.__name__\n        meth = getattr(self, \"visit_\" + node_type, self.default_visit)\n        return meth(node)\n    def default_visit(self, node):\n        node_type = node.__class__.__name__",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "documentation": {}
    },
    {
        "label": "export_json",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "peekOfCode": "def export_json(atok, pretty_print=False):\n    dict = export_dict(atok)\n    dict['comments'] = [{\n        'ast_type': 'comment',\n        'value': token.string,\n        'start': token.startpos,\n        'end': token.endpos,\n        'loc': {\n            'start': {\n                'line': token.start[0],",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "documentation": {}
    },
    {
        "label": "export_dict",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "peekOfCode": "def export_dict(atok):\n    return DictExportVisitor(atok).visit(atok.tree)\nclass DictExportVisitor:\n    ast_type_field = \"ast_type\"\n    def __init__(self, atok):\n        self.atok = atok\n    def visit(self, node):\n        node_type = node.__class__.__name__\n        meth = getattr(self, \"visit_\" + node_type, self.default_visit)\n        return meth(node)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "peekOfCode": "def parse(source):\n    assert (isinstance(source, str))\n    atok = asttokens.ASTTokens(source, parse=True)\n    return atok\ndef main():\n    source = \"\".join(fileinput.input())\n    tree = parse(source)\n    json = export_json(tree, True)\n    print(json)\nif __name__ == '__main__':",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "peekOfCode": "def main():\n    source = \"\".join(fileinput.input())\n    tree = parse(source)\n    json = export_json(tree, True)\n    print(json)\nif __name__ == '__main__':\n    main()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.astexport",
        "documentation": {}
    },
    {
        "label": "Checker",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "class Checker(object):\n    \"\"\"Load a Python source file, tokenize it, check coding style.\"\"\"\n    def __init__(self, filename=None, lines=None,\n                 options=None, report=None, **kwargs):\n        if options is None:\n            options = StyleGuide(kwargs).options\n        else:\n            assert not kwargs\n        self._io_error = None\n        self._physical_checks = options.physical_checks",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "BaseReport",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "class BaseReport(object):\n    \"\"\"Collect the results of the checks.\"\"\"\n    print_filename = False\n    def __init__(self, options):\n        self._benchmark_keys = options.benchmark_keys\n        self._ignore_code = options.ignore_code\n        # Results\n        self.elapsed = 0\n        self.total_errors = 0\n        self.counters = dict.fromkeys(self._benchmark_keys, 0)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "FileReport",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "class FileReport(BaseReport):\n    \"\"\"Collect the results of the checks and print only the filenames.\"\"\"\n    print_filename = True\nclass StandardReport(BaseReport):\n    \"\"\"Collect and print the results of the checks.\"\"\"\n    def __init__(self, options):\n        super(StandardReport, self).__init__(options)\n        self._fmt = REPORT_FORMAT.get(options.format.lower(),\n                                      options.format)\n        self._repeat = options.repeat",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "StandardReport",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "class StandardReport(BaseReport):\n    \"\"\"Collect and print the results of the checks.\"\"\"\n    def __init__(self, options):\n        super(StandardReport, self).__init__(options)\n        self._fmt = REPORT_FORMAT.get(options.format.lower(),\n                                      options.format)\n        self._repeat = options.repeat\n        self._show_source = options.show_source\n        self._show_pep8 = options.show_pep8\n    def init_file(self, filename, lines, expected, line_offset):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "DiffReport",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "class DiffReport(StandardReport):\n    \"\"\"Collect and print the results for the changed lines only.\"\"\"\n    def __init__(self, options):\n        super(DiffReport, self).__init__(options)\n        self._selected = options.selected_lines\n    def error(self, line_number, offset, text, check):\n        if line_number not in self._selected[self.filename]:\n            return\n        return super(DiffReport, self).error(line_number, offset, text, check)\nclass StyleGuide(object):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "StyleGuide",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "class StyleGuide(object):\n    \"\"\"Initialize a PEP-8 instance with few options.\"\"\"\n    def __init__(self, *args, **kwargs):\n        # build options from the command line\n        self.checker_class = kwargs.pop('checker_class', Checker)\n        parse_argv = kwargs.pop('parse_argv', False)\n        config_file = kwargs.pop('config_file', False)\n        parser = kwargs.pop('parser', None)\n        # build options from dict\n        options_dict = dict(*args, **kwargs)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "register_check",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def register_check(check, codes=None):\n    \"\"\"Register a new check object.\"\"\"\n    def _add_check(check, kind, codes, args):\n        if check in _checks[kind]:\n            _checks[kind][check][0].extend(codes or [])\n        else:\n            _checks[kind][check] = (codes or [''], args)\n    if inspect.isfunction(check):\n        args = _get_parameters(check)\n        if args and args[0] in ('physical_line', 'logical_line'):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "tabs_or_spaces",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def tabs_or_spaces(physical_line, indent_char):\n    r\"\"\"Never mix tabs and spaces.\n    The most popular way of indenting Python is with spaces only.  The\n    second-most popular way is with tabs only.  Code indented with a mixture\n    of tabs and spaces should be converted to using spaces exclusively.  When\n    invoking the Python command line interpreter with the -t option, it issues\n    warnings about code that illegally mixes tabs and spaces.  When using -tt\n    these warnings become errors.  These options are highly recommended!\n    Okay: if a == 0:\\n        a = 1\\n        b = 1\n    E101: if a == 0:\\n        a = 1\\n\\tb = 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "tabs_obsolete",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def tabs_obsolete(physical_line):\n    r\"\"\"For new projects, spaces-only are strongly recommended over tabs.\n    Okay: if True:\\n    return\n    W191: if True:\\n\\treturn\n    \"\"\"\n    indent = INDENT_REGEX.match(physical_line).group(1)\n    if '\\t' in indent:\n        return indent.index('\\t'), \"W191 indentation contains tabs\"\n@register_check\ndef trailing_whitespace(physical_line):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "trailing_whitespace",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def trailing_whitespace(physical_line):\n    r\"\"\"Trailing whitespace is superfluous.\n    The warning returned varies on whether the line itself is blank, for easier\n    filtering for those who want to indent their blank lines.\n    Okay: spam(1)\\n#\n    W291: spam(1) \\n#\n    W293: class Foo(object):\\n    \\n    bang = 12\n    \"\"\"\n    physical_line = physical_line.rstrip('\\n')    # chr(10), newline\n    physical_line = physical_line.rstrip('\\r')    # chr(13), carriage return",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "trailing_blank_lines",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def trailing_blank_lines(physical_line, lines, line_number, total_lines):\n    r\"\"\"Trailing blank lines are superfluous.\n    Okay: spam(1)\n    W391: spam(1)\\n\n    However the last line should end with a new line (warning W292).\n    \"\"\"\n    if line_number == total_lines:\n        stripped_last_line = physical_line.rstrip()\n        if not stripped_last_line:\n            return 0, \"W391 blank line at end of file\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "maximum_line_length",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def maximum_line_length(physical_line, max_line_length, multiline, noqa):\n    r\"\"\"Limit all lines to a maximum of 79 characters.\n    There are still many devices around that are limited to 80 character\n    lines; plus, limiting windows to 80 characters makes it possible to have\n    several windows side-by-side.  The default wrapping on such devices looks\n    ugly.  Therefore, please limit all lines to a maximum of 79 characters.\n    For flowing long blocks of text (docstrings or comments), limiting the\n    length to 72 characters is recommended.\n    Reports error E501.\n    \"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "blank_lines",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def blank_lines(logical_line, blank_lines, indent_level, line_number,\n                blank_before, previous_logical,\n                previous_unindented_logical_line, previous_indent_level,\n                lines):\n    r\"\"\"Separate top-level function and class definitions with two blank lines.\n    Method definitions inside a class are separated by a single blank line.\n    Extra blank lines may be used (sparingly) to separate groups of related\n    functions.  Blank lines may be omitted between a bunch of related\n    one-liners (e.g. a set of dummy implementations).\n    Use blank lines in functions, sparingly, to indicate logical sections.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "extraneous_whitespace",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def extraneous_whitespace(logical_line):\n    r\"\"\"Avoid extraneous whitespace.\n    Avoid extraneous whitespace in these situations:\n    - Immediately inside parentheses, brackets or braces.\n    - Immediately before a comma, semicolon, or colon.\n    Okay: spam(ham[1], {eggs: 2})\n    E201: spam( ham[1], {eggs: 2})\n    E201: spam(ham[ 1], {eggs: 2})\n    E201: spam(ham[1], { eggs: 2})\n    E202: spam(ham[1], {eggs: 2} )",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "whitespace_around_keywords",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def whitespace_around_keywords(logical_line):\n    r\"\"\"Avoid extraneous whitespace around keywords.\n    Okay: True and False\n    E271: True and  False\n    E272: True  and False\n    E273: True and\\tFalse\n    E274: True\\tand False\n    \"\"\"\n    for match in KEYWORD_REGEX.finditer(logical_line):\n        before, after = match.groups()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "missing_whitespace_after_import_keyword",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def missing_whitespace_after_import_keyword(logical_line):\n    r\"\"\"Multiple imports in form from x import (a, b, c) should have space\n    between import statement and parenthesised name list.\n    Okay: from foo import (bar, baz)\n    E275: from foo import(bar, baz)\n    E275: from importable.module import(bar, baz)\n    \"\"\"\n    line = logical_line\n    indicator = ' import('\n    if line.startswith('from '):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "missing_whitespace",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def missing_whitespace(logical_line):\n    r\"\"\"Each comma, semicolon or colon should be followed by whitespace.\n    Okay: [a, b]\n    Okay: (3,)\n    Okay: a[1:4]\n    Okay: a[:4]\n    Okay: a[1:]\n    Okay: a[1:4:2]\n    E231: ['a','b']\n    E231: foo(bar,baz)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "indentation",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def indentation(logical_line, previous_logical, indent_char,\n                indent_level, previous_indent_level):\n    r\"\"\"Use 4 spaces per indentation level.\n    For really old code that you don't want to mess up, you can continue to\n    use 8-space tabs.\n    Okay: a = 1\n    Okay: if a == 0:\\n    a = 1\n    E111:   a = 1\n    E114:   # a = 1\n    Okay: for item in items:\\n    pass",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "continued_indentation",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def continued_indentation(logical_line, tokens, indent_level, hang_closing,\n                          indent_char, noqa, verbose):\n    r\"\"\"Continuation lines indentation.\n    Continuation lines should align wrapped elements either vertically\n    using Python's implicit line joining inside parentheses, brackets\n    and braces, or using a hanging indent.\n    When using a hanging indent these considerations should be applied:\n    - there should be no arguments on the first line, and\n    - further indentation should be used to clearly distinguish itself as a\n      continuation line.",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "whitespace_before_parameters",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def whitespace_before_parameters(logical_line, tokens):\n    r\"\"\"Avoid extraneous whitespace.\n    Avoid extraneous whitespace in the following situations:\n    - before the open parenthesis that starts the argument list of a\n      function call.\n    - before the open parenthesis that starts an indexing or slicing.\n    Okay: spam(1)\n    E211: spam (1)\n    Okay: dict['key'] = list[index]\n    E211: dict ['key'] = list[index]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "whitespace_around_operator",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def whitespace_around_operator(logical_line):\n    r\"\"\"Avoid extraneous whitespace around an operator.\n    Okay: a = 12 + 3\n    E221: a = 4  + 5\n    E222: a = 4 +  5\n    E223: a = 4\\t+ 5\n    E224: a = 4 +\\t5\n    \"\"\"\n    for match in OPERATOR_REGEX.finditer(logical_line):\n        before, after = match.groups()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "missing_whitespace_around_operator",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def missing_whitespace_around_operator(logical_line, tokens):\n    r\"\"\"Surround operators with a single space on either side.\n    - Always surround these binary operators with a single space on\n      either side: assignment (=), augmented assignment (+=, -= etc.),\n      comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),\n      Booleans (and, or, not).\n    - If operators with different priorities are used, consider adding\n      whitespace around the operators with the lowest priorities.\n    Okay: i = i + 1\n    Okay: submitted += 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "whitespace_around_comma",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def whitespace_around_comma(logical_line):\n    r\"\"\"Avoid extraneous whitespace after a comma or a colon.\n    Note: these checks are disabled by default\n    Okay: a = (1, 2)\n    E241: a = (1,  2)\n    E242: a = (1,\\t2)\n    \"\"\"\n    line = logical_line\n    for m in WHITESPACE_AFTER_COMMA_REGEX.finditer(line):\n        found = m.start() + 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "whitespace_around_named_parameter_equals",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def whitespace_around_named_parameter_equals(logical_line, tokens):\n    r\"\"\"Don't use spaces around the '=' sign in function arguments.\n    Don't use spaces around the '=' sign when used to indicate a\n    keyword argument or a default parameter value, except when using a type\n    annotation.\n    Okay: def complex(real, imag=0.0):\n    Okay: return magic(r=real, i=imag)\n    Okay: boolean(a == b)\n    Okay: boolean(a != b)\n    Okay: boolean(a <= b)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "whitespace_before_comment",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def whitespace_before_comment(logical_line, tokens):\n    r\"\"\"Separate inline comments by at least two spaces.\n    An inline comment is a comment on the same line as a statement.  Inline\n    comments should be separated by at least two spaces from the statement.\n    They should start with a # and a single space.\n    Each line of a block comment starts with a # and a single space\n    (unless it is indented text inside the comment).\n    Okay: x = x + 1  # Increment x\n    Okay: x = x + 1    # Increment x\n    Okay: # Block comment",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "imports_on_separate_lines",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def imports_on_separate_lines(logical_line):\n    r\"\"\"Place imports on separate lines.\n    Okay: import os\\nimport sys\n    E401: import sys, os\n    Okay: from subprocess import Popen, PIPE\n    Okay: from myclas import MyClass\n    Okay: from foo.bar.yourclass import YourClass\n    Okay: import myclass\n    Okay: import foo.bar.yourclass\n    \"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "module_imports_on_top_of_file",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def module_imports_on_top_of_file(\n        logical_line, indent_level, checker_state, noqa):\n    r\"\"\"Place imports at the top of the file.\n    Always put imports at the top of the file, just after any module comments\n    and docstrings, and before module globals and constants.\n    Okay: import os\n    Okay: # this is a comment\\nimport os\n    Okay: '''this is a module docstring'''\\nimport os\n    Okay: r'''this is a module docstring'''\\nimport os\n    Okay:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "compound_statements",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def compound_statements(logical_line):\n    r\"\"\"Compound statements (on the same line) are generally discouraged.\n    While sometimes it's okay to put an if/for/while with a small body\n    on the same line, never do this for multi-clause statements.\n    Also avoid folding such long lines!\n    Always use a def statement instead of an assignment statement that\n    binds a lambda expression directly to a name.\n    Okay: if foo == 'blah':\\n    do_blah_thing()\n    Okay: do_one()\n    Okay: do_two()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "explicit_line_join",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def explicit_line_join(logical_line, tokens):\n    r\"\"\"Avoid explicit line join between brackets.\n    The preferred way of wrapping long lines is by using Python's implied line\n    continuation inside parentheses, brackets and braces.  Long lines can be\n    broken over multiple lines by wrapping expressions in parentheses.  These\n    should be used in preference to using a backslash for line continuation.\n    E502: aaa = [123, \\\\n       123]\n    E502: aaa = (\"bbb \" \\\\n       \"ccc\")\n    Okay: aaa = [123,\\n       123]\n    Okay: aaa = (\"bbb \"\\n       \"ccc\")",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "break_before_binary_operator",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def break_before_binary_operator(logical_line, tokens):\n    r\"\"\"\n    Avoid breaks before binary operators.\n    The preferred place to break around a binary operator is after the\n    operator, not before it.\n    W503: (width == 0\\n + height == 0)\n    W503: (width == 0\\n and height == 0)\n    W503: var = (1\\n       & ~2)\n    W503: var = (1\\n       / -2)\n    W503: var = (1\\n       + -1\\n       + -2)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "break_after_binary_operator",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def break_after_binary_operator(logical_line, tokens):\n    r\"\"\"\n    Avoid breaks after binary operators.\n    The preferred place to break around a binary operator is before the\n    operator, not after it.\n    W504: (width == 0 +\\n height == 0)\n    W504: (width == 0 and\\n height == 0)\n    W504: var = (1 &\\n       ~2)\n    Okay: foo(\\n    -x)\n    Okay: foo(x\\n    [])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "comparison_to_singleton",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def comparison_to_singleton(logical_line, noqa):\n    r\"\"\"Comparison to singletons should use \"is\" or \"is not\".\n    Comparisons to singletons like None should always be done\n    with \"is\" or \"is not\", never the equality operators.\n    Okay: if arg is not None:\n    E711: if arg != None:\n    E711: if None == arg:\n    E712: if arg == True:\n    E712: if False == arg:\n    Also, beware of writing if x when you really mean if x is not None --",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "comparison_negative",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def comparison_negative(logical_line):\n    r\"\"\"Negative comparison should be done using \"not in\" and \"is not\".\n    Okay: if x not in y:\\n    pass\n    Okay: assert (X in Y or X is Z)\n    Okay: if not (X in Y):\\n    pass\n    Okay: zz = x is not y\n    E713: Z = not X in Y\n    E713: if not X.B in Y:\\n    pass\n    E714: if not X is Y:\\n    pass\n    E714: Z = not X.B is Y",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "comparison_type",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def comparison_type(logical_line, noqa):\n    r\"\"\"Object type comparisons should always use isinstance().\n    Do not compare types directly.\n    Okay: if isinstance(obj, int):\n    E721: if type(obj) is type(1):\n    When checking if an object is a string, keep in mind that it might be a\n    unicode string too! In Python 2.3, str and unicode have a common base\n    class, basestring, so you can do:\n    Okay: if isinstance(obj, basestring):\n    Okay: if type(a1) is type(b1):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "bare_except",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def bare_except(logical_line, noqa):\n    r\"\"\"When catching exceptions, mention specific exceptions when possible.\n    Okay: except Exception:\n    Okay: except BaseException:\n    E722: except:\n    \"\"\"\n    if noqa:\n        return\n    regex = re.compile(r\"except\\s*:\")\n    match = regex.match(logical_line)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "ambiguous_identifier",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def ambiguous_identifier(logical_line, tokens):\n    r\"\"\"Never use the characters 'l', 'O', or 'I' as variable names.\n    In some fonts, these characters are indistinguishable from the numerals\n    one and zero. When tempted to use 'l', use 'L' instead.\n    Okay: L = 0\n    Okay: o = 123\n    Okay: i = 42\n    E741: l = 0\n    E741: O = 123\n    E741: I = 42",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "python_3000_has_key",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def python_3000_has_key(logical_line, noqa):\n    r\"\"\"The {}.has_key() method is removed in Python 3: use the 'in' operator.\n    Okay: if \"alph\" in d:\\n    print d[\"alph\"]\n    W601: assert d.has_key('alph')\n    \"\"\"\n    pos = logical_line.find('.has_key(')\n    if pos > -1 and not noqa:\n        yield pos, \"W601 .has_key() is deprecated, use 'in'\"\n@register_check\ndef python_3000_raise_comma(logical_line):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "python_3000_raise_comma",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def python_3000_raise_comma(logical_line):\n    r\"\"\"When raising an exception, use \"raise ValueError('message')\".\n    The older form is removed in Python 3.\n    Okay: raise DummyError(\"Message\")\n    W602: raise DummyError, \"Message\"\n    \"\"\"\n    match = RAISE_COMMA_REGEX.match(logical_line)\n    if match and not RERAISE_COMMA_REGEX.match(logical_line):\n        yield match.end() - 1, \"W602 deprecated form of raising exception\"\n@register_check",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "python_3000_not_equal",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def python_3000_not_equal(logical_line):\n    r\"\"\"New code should always use != instead of <>.\n    The older syntax is removed in Python 3.\n    Okay: if a != 'no':\n    W603: if a <> 'no':\n    \"\"\"\n    pos = logical_line.find('<>')\n    if pos > -1:\n        yield pos, \"W603 '<>' is deprecated, use '!='\"\n@register_check",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "python_3000_backticks",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def python_3000_backticks(logical_line):\n    r\"\"\"Use repr() instead of backticks in Python 3.\n    Okay: val = repr(1 + 2)\n    W604: val = `1 + 2`\n    \"\"\"\n    pos = logical_line.find('`')\n    if pos > -1:\n        yield pos, \"W604 backticks are deprecated, use 'repr()'\"\n@register_check\ndef python_3000_invalid_escape_sequence(logical_line, tokens):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "python_3000_invalid_escape_sequence",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def python_3000_invalid_escape_sequence(logical_line, tokens):\n    r\"\"\"Invalid escape sequences are deprecated in Python 3.6.\n    Okay: regex = r'\\.png$'\n    W605: regex = '\\.png$'\n    \"\"\"\n    # https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\n    valid = [\n        '\\n',\n        '\\\\',\n        '\\'',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "python_3000_async_await_keywords",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def python_3000_async_await_keywords(logical_line, tokens):\n    \"\"\"'async' and 'await' are reserved keywords starting with Python 3.7\n    W606: async = 42\n    W606: await = 42\n    Okay: async def read_data(db):\\n    data = await db.fetch('SELECT ...')\n    \"\"\"\n    # The Python tokenize library before Python 3.5 recognizes async/await as a\n    # NAME token. Therefore, use a state machine to look for the possible\n    # async/await constructs as defined by the Python grammar:\n    # https://docs.python.org/3/reference/grammar.html",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "expand_indent",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def expand_indent(line):\n    r\"\"\"Return the amount of indentation.\n    Tabs are expanded to the next multiple of 8.\n    >>> expand_indent('    ')\n    4\n    >>> expand_indent('\\t')\n    8\n    >>> expand_indent('       \\t')\n    8\n    >>> expand_indent('        \\t')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "mute_string",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def mute_string(text):\n    \"\"\"Replace contents with 'xxx' to prevent syntax matching.\n    >>> mute_string('\"abc\"')\n    '\"xxx\"'\n    >>> mute_string(\"'''abc'''\")\n    \"'''xxx'''\"\n    >>> mute_string(\"r'abc'\")\n    \"r'xxx'\"\n    \"\"\"\n    # String modifiers (e.g. u or r)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "parse_udiff",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def parse_udiff(diff, patterns=None, parent='.'):\n    \"\"\"Return a dictionary of matching lines.\"\"\"\n    # For each file of the diff, the entry key is the filename,\n    # and the value is a set of row numbers to consider.\n    rv = {}\n    path = nrows = None\n    for line in diff.splitlines():\n        if nrows:\n            if line[:1] != '-':\n                nrows -= 1",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "normalize_paths",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def normalize_paths(value, parent=os.curdir):\n    \"\"\"Parse a comma-separated list of paths.\n    Return a list of absolute paths.\n    \"\"\"\n    if not value:\n        return []\n    if isinstance(value, list):\n        return value\n    paths = []\n    for path in value.split(','):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "filename_match",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def filename_match(filename, patterns, default=True):\n    \"\"\"Check if patterns contains a pattern that matches filename.\n    If patterns is unspecified, this always returns True.\n    \"\"\"\n    if not patterns:\n        return default\n    return any(fnmatch(filename, pattern) for pattern in patterns)\ndef update_counts(s, counts):\n    r\"\"\"Adds one to the counts of each appearance of characters in s,\n        for characters in counts\"\"\"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "update_counts",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def update_counts(s, counts):\n    r\"\"\"Adds one to the counts of each appearance of characters in s,\n        for characters in counts\"\"\"\n    for char in s:\n        if char in counts:\n            counts[char] += 1\ndef _is_eol_token(token):\n    return token[0] in NEWLINE or token[4][token[3][1]:].lstrip() == '\\\\\\n'\nif COMMENT_WITH_NL:\n    def _is_eol_token(token, _eol_token=_is_eol_token):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "get_parser",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def get_parser(prog='pycodestyle', version=__version__):\n    \"\"\"Create the parser for the program.\"\"\"\n    parser = OptionParser(prog=prog, version=version,\n                          usage=\"%prog [options] input ...\")\n    parser.config_options = [\n        'exclude', 'filename', 'select', 'ignore', 'max-line-length',\n        'hang-closing', 'count', 'format', 'quiet', 'show-pep8',\n        'show-source', 'statistics', 'verbose']\n    parser.add_option('-v', '--verbose', default=0, action='count',\n                      help=\"print status messages, or debug with -vv\")",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "read_config",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def read_config(options, args, arglist, parser):\n    \"\"\"Read and parse configurations.\n    If a config file is specified on the command line with the \"--config\"\n    option, then only it is used for configuration.\n    Otherwise, the user configuration (~/.config/pycodestyle) and any local\n    configurations in the current directory or above will be merged together\n    (in that order) using the read method of ConfigParser.\n    \"\"\"\n    config = RawConfigParser()\n    cli_conf = options.config",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "process_options",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "def process_options(arglist=None, parse_argv=False, config_file=None,\n                    parser=None, verbose=None):\n    \"\"\"Process options passed either via arglist or via command line args.\n    Passing in the ``config_file`` parameter allows other tools, such as flake8\n    to specify their own options to be processed in pycodestyle.\n    \"\"\"\n    if not parser:\n        parser = get_parser()\n    if not parser.has_option('--config'):\n        group = parser.add_option_group(\"Configuration\", description=(",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "__version__ = '2.3.1'\nDEFAULT_EXCLUDE = '.svn,CVS,.bzr,.hg,.git,__pycache__,.tox'\nDEFAULT_IGNORE = 'E121,E123,E126,E226,E24,E704,W503,W504'\ntry:\n    if sys.platform == 'win32':\n        USER_CONFIG = os.path.expanduser(r'~\\.pycodestyle')\n    else:\n        USER_CONFIG = os.path.join(\n            os.getenv('XDG_CONFIG_HOME') or os.path.expanduser('~/.config'),\n            'pycodestyle'",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "DEFAULT_EXCLUDE",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "DEFAULT_EXCLUDE = '.svn,CVS,.bzr,.hg,.git,__pycache__,.tox'\nDEFAULT_IGNORE = 'E121,E123,E126,E226,E24,E704,W503,W504'\ntry:\n    if sys.platform == 'win32':\n        USER_CONFIG = os.path.expanduser(r'~\\.pycodestyle')\n    else:\n        USER_CONFIG = os.path.join(\n            os.getenv('XDG_CONFIG_HOME') or os.path.expanduser('~/.config'),\n            'pycodestyle'\n        )",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "DEFAULT_IGNORE",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "DEFAULT_IGNORE = 'E121,E123,E126,E226,E24,E704,W503,W504'\ntry:\n    if sys.platform == 'win32':\n        USER_CONFIG = os.path.expanduser(r'~\\.pycodestyle')\n    else:\n        USER_CONFIG = os.path.join(\n            os.getenv('XDG_CONFIG_HOME') or os.path.expanduser('~/.config'),\n            'pycodestyle'\n        )\nexcept ImportError:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "PROJECT_CONFIG",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "PROJECT_CONFIG = ('setup.cfg', 'tox.ini')\nTESTSUITE_PATH = os.path.join(os.path.dirname(__file__), 'testsuite')\nMAX_LINE_LENGTH = 79\nREPORT_FORMAT = {\n    'default': '%(path)s:%(row)d:%(col)d: %(code)s %(text)s',\n    'pylint': '%(path)s:%(row)d: [%(code)s] %(text)s',\n}\nPyCF_ONLY_AST = 1024\nSINGLETONS = frozenset(['False', 'None', 'True'])\nKEYWORDS = frozenset(keyword.kwlist + ['print']) - SINGLETONS",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "TESTSUITE_PATH",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "TESTSUITE_PATH = os.path.join(os.path.dirname(__file__), 'testsuite')\nMAX_LINE_LENGTH = 79\nREPORT_FORMAT = {\n    'default': '%(path)s:%(row)d:%(col)d: %(code)s %(text)s',\n    'pylint': '%(path)s:%(row)d: [%(code)s] %(text)s',\n}\nPyCF_ONLY_AST = 1024\nSINGLETONS = frozenset(['False', 'None', 'True'])\nKEYWORDS = frozenset(keyword.kwlist + ['print']) - SINGLETONS\nUNARY_OPERATORS = frozenset(['>>', '**', '*', '+', '-'])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "MAX_LINE_LENGTH",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "MAX_LINE_LENGTH = 79\nREPORT_FORMAT = {\n    'default': '%(path)s:%(row)d:%(col)d: %(code)s %(text)s',\n    'pylint': '%(path)s:%(row)d: [%(code)s] %(text)s',\n}\nPyCF_ONLY_AST = 1024\nSINGLETONS = frozenset(['False', 'None', 'True'])\nKEYWORDS = frozenset(keyword.kwlist + ['print']) - SINGLETONS\nUNARY_OPERATORS = frozenset(['>>', '**', '*', '+', '-'])\nARITHMETIC_OP = frozenset(['**', '*', '/', '//', '+', '-'])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "REPORT_FORMAT",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "REPORT_FORMAT = {\n    'default': '%(path)s:%(row)d:%(col)d: %(code)s %(text)s',\n    'pylint': '%(path)s:%(row)d: [%(code)s] %(text)s',\n}\nPyCF_ONLY_AST = 1024\nSINGLETONS = frozenset(['False', 'None', 'True'])\nKEYWORDS = frozenset(keyword.kwlist + ['print']) - SINGLETONS\nUNARY_OPERATORS = frozenset(['>>', '**', '*', '+', '-'])\nARITHMETIC_OP = frozenset(['**', '*', '/', '//', '+', '-'])\nWS_OPTIONAL_OPERATORS = ARITHMETIC_OP.union(['^', '&', '|', '<<', '>>', '%'])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "PyCF_ONLY_AST",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "PyCF_ONLY_AST = 1024\nSINGLETONS = frozenset(['False', 'None', 'True'])\nKEYWORDS = frozenset(keyword.kwlist + ['print']) - SINGLETONS\nUNARY_OPERATORS = frozenset(['>>', '**', '*', '+', '-'])\nARITHMETIC_OP = frozenset(['**', '*', '/', '//', '+', '-'])\nWS_OPTIONAL_OPERATORS = ARITHMETIC_OP.union(['^', '&', '|', '<<', '>>', '%'])\nWS_NEEDED_OPERATORS = frozenset([\n    '**=', '*=', '/=', '//=', '+=', '-=', '!=', '<>', '<', '>',\n    '%=', '^=', '&=', '|=', '==', '<=', '>=', '<<=', '>>=', '='])\nWHITESPACE = frozenset(' \\t')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "SINGLETONS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "SINGLETONS = frozenset(['False', 'None', 'True'])\nKEYWORDS = frozenset(keyword.kwlist + ['print']) - SINGLETONS\nUNARY_OPERATORS = frozenset(['>>', '**', '*', '+', '-'])\nARITHMETIC_OP = frozenset(['**', '*', '/', '//', '+', '-'])\nWS_OPTIONAL_OPERATORS = ARITHMETIC_OP.union(['^', '&', '|', '<<', '>>', '%'])\nWS_NEEDED_OPERATORS = frozenset([\n    '**=', '*=', '/=', '//=', '+=', '-=', '!=', '<>', '<', '>',\n    '%=', '^=', '&=', '|=', '==', '<=', '>=', '<<=', '>>=', '='])\nWHITESPACE = frozenset(' \\t')\nNEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "KEYWORDS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "KEYWORDS = frozenset(keyword.kwlist + ['print']) - SINGLETONS\nUNARY_OPERATORS = frozenset(['>>', '**', '*', '+', '-'])\nARITHMETIC_OP = frozenset(['**', '*', '/', '//', '+', '-'])\nWS_OPTIONAL_OPERATORS = ARITHMETIC_OP.union(['^', '&', '|', '<<', '>>', '%'])\nWS_NEEDED_OPERATORS = frozenset([\n    '**=', '*=', '/=', '//=', '+=', '-=', '!=', '<>', '<', '>',\n    '%=', '^=', '&=', '|=', '==', '<=', '>=', '<<=', '>>=', '='])\nWHITESPACE = frozenset(' \\t')\nNEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])\nSKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "UNARY_OPERATORS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "UNARY_OPERATORS = frozenset(['>>', '**', '*', '+', '-'])\nARITHMETIC_OP = frozenset(['**', '*', '/', '//', '+', '-'])\nWS_OPTIONAL_OPERATORS = ARITHMETIC_OP.union(['^', '&', '|', '<<', '>>', '%'])\nWS_NEEDED_OPERATORS = frozenset([\n    '**=', '*=', '/=', '//=', '+=', '-=', '!=', '<>', '<', '>',\n    '%=', '^=', '&=', '|=', '==', '<=', '>=', '<<=', '>>=', '='])\nWHITESPACE = frozenset(' \\t')\nNEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])\nSKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])\n# ERRORTOKEN is triggered by backticks in Python 3",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "ARITHMETIC_OP",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "ARITHMETIC_OP = frozenset(['**', '*', '/', '//', '+', '-'])\nWS_OPTIONAL_OPERATORS = ARITHMETIC_OP.union(['^', '&', '|', '<<', '>>', '%'])\nWS_NEEDED_OPERATORS = frozenset([\n    '**=', '*=', '/=', '//=', '+=', '-=', '!=', '<>', '<', '>',\n    '%=', '^=', '&=', '|=', '==', '<=', '>=', '<<=', '>>=', '='])\nWHITESPACE = frozenset(' \\t')\nNEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])\nSKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])\n# ERRORTOKEN is triggered by backticks in Python 3\nSKIP_COMMENTS = SKIP_TOKENS.union([tokenize.COMMENT, tokenize.ERRORTOKEN])",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "WS_OPTIONAL_OPERATORS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "WS_OPTIONAL_OPERATORS = ARITHMETIC_OP.union(['^', '&', '|', '<<', '>>', '%'])\nWS_NEEDED_OPERATORS = frozenset([\n    '**=', '*=', '/=', '//=', '+=', '-=', '!=', '<>', '<', '>',\n    '%=', '^=', '&=', '|=', '==', '<=', '>=', '<<=', '>>=', '='])\nWHITESPACE = frozenset(' \\t')\nNEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])\nSKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])\n# ERRORTOKEN is triggered by backticks in Python 3\nSKIP_COMMENTS = SKIP_TOKENS.union([tokenize.COMMENT, tokenize.ERRORTOKEN])\nBENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical lines']",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "WS_NEEDED_OPERATORS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "WS_NEEDED_OPERATORS = frozenset([\n    '**=', '*=', '/=', '//=', '+=', '-=', '!=', '<>', '<', '>',\n    '%=', '^=', '&=', '|=', '==', '<=', '>=', '<<=', '>>=', '='])\nWHITESPACE = frozenset(' \\t')\nNEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])\nSKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])\n# ERRORTOKEN is triggered by backticks in Python 3\nSKIP_COMMENTS = SKIP_TOKENS.union([tokenize.COMMENT, tokenize.ERRORTOKEN])\nBENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical lines']\nINDENT_REGEX = re.compile(r'([ \\t]*)')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "WHITESPACE",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "WHITESPACE = frozenset(' \\t')\nNEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])\nSKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])\n# ERRORTOKEN is triggered by backticks in Python 3\nSKIP_COMMENTS = SKIP_TOKENS.union([tokenize.COMMENT, tokenize.ERRORTOKEN])\nBENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical lines']\nINDENT_REGEX = re.compile(r'([ \\t]*)')\nRAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,')\nRERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "NEWLINE",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "NEWLINE = frozenset([tokenize.NL, tokenize.NEWLINE])\nSKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])\n# ERRORTOKEN is triggered by backticks in Python 3\nSKIP_COMMENTS = SKIP_TOKENS.union([tokenize.COMMENT, tokenize.ERRORTOKEN])\nBENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical lines']\nINDENT_REGEX = re.compile(r'([ \\t]*)')\nRAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,')\nRERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "SKIP_TOKENS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "SKIP_TOKENS = NEWLINE.union([tokenize.INDENT, tokenize.DEDENT])\n# ERRORTOKEN is triggered by backticks in Python 3\nSKIP_COMMENTS = SKIP_TOKENS.union([tokenize.COMMENT, tokenize.ERRORTOKEN])\nBENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical lines']\nINDENT_REGEX = re.compile(r'([ \\t]*)')\nRAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,')\nRERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "SKIP_COMMENTS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "SKIP_COMMENTS = SKIP_TOKENS.union([tokenize.COMMENT, tokenize.ERRORTOKEN])\nBENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical lines']\nINDENT_REGEX = re.compile(r'([ \\t]*)')\nRAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,')\nRERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "BENCHMARK_KEYS",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "BENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical lines']\nINDENT_REGEX = re.compile(r'([ \\t]*)')\nRAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,')\nRERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "INDENT_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "INDENT_REGEX = re.compile(r'([ \\t]*)')\nRAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,')\nRERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "RAISE_COMMA_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "RAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,')\nRERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "RERAISE_COMMA_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "RERAISE_COMMA_REGEX = re.compile(r'raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')\nERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "ERRORCODE_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "ERRORCODE_REGEX = re.compile(r'\\b[A-Z]\\d{3}\\b')\nDOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')\nKEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "DOCSTRING_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "DOCSTRING_REGEX = re.compile(r'u?r?[\"\\']')\nEXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')\nKEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))\nOPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "EXTRANEOUS_WHITESPACE_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "EXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\nWHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')\nKEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))\nOPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')\nLAMBDA_REGEX = re.compile(r'\\blambda\\b')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "WHITESPACE_AFTER_COMMA_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "WHITESPACE_AFTER_COMMA_REGEX = re.compile(r'[,;:]\\s*(?:  |\\t)')\nCOMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')\nKEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))\nOPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')\nLAMBDA_REGEX = re.compile(r'\\blambda\\b')\nHUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "COMPARE_SINGLETON_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "COMPARE_SINGLETON_REGEX = re.compile(r'(\\bNone|\\bFalse|\\bTrue)?\\s*([=!]=)'\n                                     r'\\s*(?(1)|(None|False|True))\\b')\nCOMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')\nKEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))\nOPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')\nLAMBDA_REGEX = re.compile(r'\\blambda\\b')\nHUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')\nSTARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "COMPARE_NEGATIVE_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "COMPARE_NEGATIVE_REGEX = re.compile(r'\\b(not)\\s+[^][)(}{ ]+\\s+(in|is)\\s')\nCOMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')\nKEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))\nOPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')\nLAMBDA_REGEX = re.compile(r'\\blambda\\b')\nHUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')\nSTARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')\nSTARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "COMPARE_TYPE_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "COMPARE_TYPE_REGEX = re.compile(r'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type'\n                                r'|\\s*\\(\\s*([^)]*[^ )])\\s*\\))')\nKEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))\nOPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')\nLAMBDA_REGEX = re.compile(r'\\blambda\\b')\nHUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')\nSTARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')\nSTARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "KEYWORD_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "KEYWORD_REGEX = re.compile(r'(\\s*)\\b(?:%s)\\b(\\s*)' % r'|'.join(KEYWORDS))\nOPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')\nLAMBDA_REGEX = re.compile(r'\\blambda\\b')\nHUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')\nSTARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')\nSTARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (\n        'def', 'async def',\n        'for', 'async for',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "OPERATOR_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "OPERATOR_REGEX = re.compile(r'(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*)')\nLAMBDA_REGEX = re.compile(r'\\blambda\\b')\nHUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')\nSTARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')\nSTARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (\n        'def', 'async def',\n        'for', 'async for',\n        'if', 'elif', 'else',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "LAMBDA_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "LAMBDA_REGEX = re.compile(r'\\blambda\\b')\nHUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')\nSTARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')\nSTARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (\n        'def', 'async def',\n        'for', 'async for',\n        'if', 'elif', 'else',\n        'try', 'except', 'finally',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "HUNK_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "HUNK_REGEX = re.compile(r'^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@.*$')\nSTARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')\nSTARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (\n        'def', 'async def',\n        'for', 'async for',\n        'if', 'elif', 'else',\n        'try', 'except', 'finally',\n        'with', 'async with',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "STARTSWITH_DEF_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "STARTSWITH_DEF_REGEX = re.compile(r'^(async\\s+def|def)\\b')\nSTARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (\n        'def', 'async def',\n        'for', 'async for',\n        'if', 'elif', 'else',\n        'try', 'except', 'finally',\n        'with', 'async with',\n        'class',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "STARTSWITH_TOP_LEVEL_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "STARTSWITH_TOP_LEVEL_REGEX = re.compile(r'^(async\\s+def\\s+|def\\s+|class\\s+|@)')\nSTARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (\n        'def', 'async def',\n        'for', 'async for',\n        'if', 'elif', 'else',\n        'try', 'except', 'finally',\n        'with', 'async with',\n        'class',\n        'while',",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "STARTSWITH_INDENT_STATEMENT_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "STARTSWITH_INDENT_STATEMENT_REGEX = re.compile(\n    r'^\\s*({0})\\b'.format('|'.join(s.replace(' ', r'\\s+') for s in (\n        'def', 'async def',\n        'for', 'async for',\n        'if', 'elif', 'else',\n        'try', 'except', 'finally',\n        'with', 'async with',\n        'class',\n        'while',\n    )))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "DUNDER_REGEX",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "DUNDER_REGEX = re.compile(r'^__([^\\s]+)__ = ')\n# Work around Python < 2.6 behaviour, which does not generate NL after\n# a comment which is on a line by itself.\nCOMMENT_WITH_NL = tokenize.generate_tokens(['#\\n'].pop).send(None)[1] == '#\\n'\n_checks = {'physical_line': {}, 'logical_line': {}, 'tree': {}}\ndef _get_parameters(function):\n    if sys.version_info >= (3, 3):\n        return [parameter.name\n                for parameter\n                in inspect.signature(function).parameters.values()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "COMMENT_WITH_NL",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "COMMENT_WITH_NL = tokenize.generate_tokens(['#\\n'].pop).send(None)[1] == '#\\n'\n_checks = {'physical_line': {}, 'logical_line': {}, 'tree': {}}\ndef _get_parameters(function):\n    if sys.version_info >= (3, 3):\n        return [parameter.name\n                for parameter\n                in inspect.signature(function).parameters.values()\n                if parameter.kind == parameter.POSITIONAL_OR_KEYWORD]\n    else:\n        return inspect.getargspec(function)[0]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "_checks",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "_checks = {'physical_line': {}, 'logical_line': {}, 'tree': {}}\ndef _get_parameters(function):\n    if sys.version_info >= (3, 3):\n        return [parameter.name\n                for parameter\n                in inspect.signature(function).parameters.values()\n                if parameter.kind == parameter.POSITIONAL_OR_KEYWORD]\n    else:\n        return inspect.getargspec(function)[0]\ndef register_check(check, codes=None):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "noqa",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "peekOfCode": "noqa = lru_cache(512)(re.compile(r'# no(?:qa|pep8)\\b', re.I).search)\ndef expand_indent(line):\n    r\"\"\"Return the amount of indentation.\n    Tabs are expanded to the next multiple of 8.\n    >>> expand_indent('    ')\n    4\n    >>> expand_indent('\\t')\n    8\n    >>> expand_indent('       \\t')\n    8",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.pycodestyle",
        "documentation": {}
    },
    {
        "label": "_LazyDescr",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class _LazyDescr(object):\n    def __init__(self, name):\n        self.name = name\n    def __get__(self, obj, tp):\n        result = self._resolve()\n        setattr(obj, self.name, result)  # Invokes __set__.\n        try:\n            # This is a bit ugly, but it avoids running this again by\n            # removing this descriptor.\n            delattr(obj.__class__, self.name)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "MovedModule",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class MovedModule(_LazyDescr):\n    def __init__(self, name, old, new=None):\n        super(MovedModule, self).__init__(name)\n        if PY3:\n            if new is None:\n                new = name\n            self.mod = new\n        else:\n            self.mod = old\n    def _resolve(self):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_LazyModule",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class _LazyModule(types.ModuleType):\n    def __init__(self, name):\n        super(_LazyModule, self).__init__(name)\n        self.__doc__ = self.__class__.__doc__\n    def __dir__(self):\n        attrs = [\"__doc__\", \"__name__\"]\n        attrs += [attr.name for attr in self._moved_attributes]\n        return attrs\n    # Subclasses should override this\n    _moved_attributes = []",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "MovedAttribute",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class MovedAttribute(_LazyDescr):\n    def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):\n        super(MovedAttribute, self).__init__(name)\n        if PY3:\n            if new_mod is None:\n                new_mod = name\n            self.mod = new_mod\n            if new_attr is None:\n                if old_attr is None:\n                    new_attr = name",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_SixMetaPathImporter",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class _SixMetaPathImporter(object):\n    \"\"\"\n    A meta path importer to import six.moves and its submodules.\n    This class implements a PEP302 finder and loader. It should be compatible\n    with Python 2.5 and all existing versions of Python3\n    \"\"\"\n    def __init__(self, six_module_name):\n        self.name = six_module_name\n        self.known_modules = {}\n    def _add_module(self, mod, *fullnames):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_MovedItems",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class _MovedItems(_LazyModule):\n    \"\"\"Lazy loading of moved objects\"\"\"\n    __path__ = []  # mark as package\n_moved_attributes = [\n    MovedAttribute(\"cStringIO\", \"cStringIO\", \"io\", \"StringIO\"),\n    MovedAttribute(\"filter\", \"itertools\", \"builtins\", \"ifilter\", \"filter\"),\n    MovedAttribute(\"filterfalse\", \"itertools\", \"itertools\", \"ifilterfalse\", \"filterfalse\"),\n    MovedAttribute(\"input\", \"__builtin__\", \"builtins\", \"raw_input\", \"input\"),\n    MovedAttribute(\"intern\", \"__builtin__\", \"sys\"),\n    MovedAttribute(\"map\", \"itertools\", \"builtins\", \"imap\", \"map\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_parse",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class Module_six_moves_urllib_parse(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_parse\"\"\"\n_urllib_parse_moved_attributes = [\n    MovedAttribute(\"ParseResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"SplitResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qs\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qsl\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urldefrag\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urljoin\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlparse\", \"urlparse\", \"urllib.parse\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_error",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class Module_six_moves_urllib_error(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_error\"\"\"\n_urllib_error_moved_attributes = [\n    MovedAttribute(\"URLError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"HTTPError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"ContentTooShortError\", \"urllib\", \"urllib.error\"),\n]\nfor attr in _urllib_error_moved_attributes:\n    setattr(Module_six_moves_urllib_error, attr.name, attr)\ndel attr",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_request",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class Module_six_moves_urllib_request(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_request\"\"\"\n_urllib_request_moved_attributes = [\n    MovedAttribute(\"urlopen\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"install_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"build_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"pathname2url\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"url2pathname\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"getproxies\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"Request\", \"urllib2\", \"urllib.request\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_response",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class Module_six_moves_urllib_response(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_response\"\"\"\n_urllib_response_moved_attributes = [\n    MovedAttribute(\"addbase\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addclosehook\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfo\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfourl\", \"urllib\", \"urllib.response\"),\n]\nfor attr in _urllib_response_moved_attributes:\n    setattr(Module_six_moves_urllib_response, attr.name, attr)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_robotparser",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class Module_six_moves_urllib_robotparser(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_robotparser\"\"\"\n_urllib_robotparser_moved_attributes = [\n    MovedAttribute(\"RobotFileParser\", \"robotparser\", \"urllib.robotparser\"),\n]\nfor attr in _urllib_robotparser_moved_attributes:\n    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)\ndel attr\nModule_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes\n_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + \".moves.urllib.robotparser\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib",
        "kind": 6,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "class Module_six_moves_urllib(types.ModuleType):\n    \"\"\"Create a six.moves.urllib namespace that resembles the Python 3 namespace\"\"\"\n    __path__ = []  # mark as package\n    parse = _importer._get_module(\"moves.urllib_parse\")\n    error = _importer._get_module(\"moves.urllib_error\")\n    request = _importer._get_module(\"moves.urllib_request\")\n    response = _importer._get_module(\"moves.urllib_response\")\n    robotparser = _importer._get_module(\"moves.urllib_robotparser\")\n    def __dir__(self):\n        return ['parse', 'error', 'request', 'response', 'robotparser']",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "add_move",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def add_move(move):\n    \"\"\"Add an item to six.moves.\"\"\"\n    setattr(_MovedItems, move.name, move)\ndef remove_move(name):\n    \"\"\"Remove item from six.moves.\"\"\"\n    try:\n        delattr(_MovedItems, name)\n    except AttributeError:\n        try:\n            del moves.__dict__[name]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "remove_move",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def remove_move(name):\n    \"\"\"Remove item from six.moves.\"\"\"\n    try:\n        delattr(_MovedItems, name)\n    except AttributeError:\n        try:\n            del moves.__dict__[name]\n        except KeyError:\n            raise AttributeError(\"no such move, %r\" % (name,))\nif PY3:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "assertCountEqual",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def assertCountEqual(self, *args, **kwargs):\n    return getattr(self, _assertCountEqual)(*args, **kwargs)\ndef assertRaisesRegex(self, *args, **kwargs):\n    return getattr(self, _assertRaisesRegex)(*args, **kwargs)\ndef assertRegex(self, *args, **kwargs):\n    return getattr(self, _assertRegex)(*args, **kwargs)\nif PY3:\n    exec_ = getattr(moves.builtins, \"exec\")\n    def reraise(tp, value, tb=None):\n        try:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "assertRaisesRegex",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def assertRaisesRegex(self, *args, **kwargs):\n    return getattr(self, _assertRaisesRegex)(*args, **kwargs)\ndef assertRegex(self, *args, **kwargs):\n    return getattr(self, _assertRegex)(*args, **kwargs)\nif PY3:\n    exec_ = getattr(moves.builtins, \"exec\")\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "assertRegex",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def assertRegex(self, *args, **kwargs):\n    return getattr(self, _assertRegex)(*args, **kwargs)\nif PY3:\n    exec_ = getattr(moves.builtins, \"exec\")\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()\n            if value.__traceback__ is not tb:\n                raise value.with_traceback(tb)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "with_metaclass",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def with_metaclass(meta, *bases):\n    \"\"\"Create a base class with a metaclass.\"\"\"\n    # This requires a bit of explanation: the basic idea is to make a dummy\n    # metaclass for one level of class instantiation that replaces itself with\n    # the actual metaclass.\n    class metaclass(type):\n        def __new__(cls, name, this_bases, d):\n            return meta(name, bases, d)\n        @classmethod\n        def __prepare__(cls, name, this_bases):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "add_metaclass",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def add_metaclass(metaclass):\n    \"\"\"Class decorator for creating a class with a metaclass.\"\"\"\n    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        slots = orig_vars.get('__slots__')\n        if slots is not None:\n            if isinstance(slots, str):\n                slots = [slots]\n            for slots_var in slots:\n                orig_vars.pop(slots_var)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "python_2_unicode_compatible",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "def python_2_unicode_compatible(klass):\n    \"\"\"\n    A decorator that defines __unicode__ and __str__ methods under Python 2.\n    Under Python 3 it does nothing.\n    To support Python 2 and 3 with a single code base, define a __str__ method\n    returning text and apply this decorator to the class.\n    \"\"\"\n    if PY2:\n        if '__str__' not in klass.__dict__:\n            raise ValueError(\"@python_2_unicode_compatible cannot be applied \"",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "__author__ = \"Benjamin Peterson <benjamin@python.org>\"\n__version__ = \"1.11.0\"\n# Useful for very coarse version differentiation.\nPY2 = sys.version_info[0] == 2\nPY3 = sys.version_info[0] == 3\nPY34 = sys.version_info[0:2] >= (3, 4)\nif PY3:\n    string_types = str,\n    integer_types = int,\n    class_types = type,",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "__version__ = \"1.11.0\"\n# Useful for very coarse version differentiation.\nPY2 = sys.version_info[0] == 2\nPY3 = sys.version_info[0] == 3\nPY34 = sys.version_info[0:2] >= (3, 4)\nif PY3:\n    string_types = str,\n    integer_types = int,\n    class_types = type,\n    text_type = str",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "PY2",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "PY2 = sys.version_info[0] == 2\nPY3 = sys.version_info[0] == 3\nPY34 = sys.version_info[0:2] >= (3, 4)\nif PY3:\n    string_types = str,\n    integer_types = int,\n    class_types = type,\n    text_type = str\n    binary_type = bytes\n    MAXSIZE = sys.maxsize",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "PY3 = sys.version_info[0] == 3\nPY34 = sys.version_info[0:2] >= (3, 4)\nif PY3:\n    string_types = str,\n    integer_types = int,\n    class_types = type,\n    text_type = str\n    binary_type = bytes\n    MAXSIZE = sys.maxsize\nelse:",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "PY34",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "PY34 = sys.version_info[0:2] >= (3, 4)\nif PY3:\n    string_types = str,\n    integer_types = int,\n    class_types = type,\n    text_type = str\n    binary_type = bytes\n    MAXSIZE = sys.maxsize\nelse:\n    string_types = basestring,",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_importer",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_importer = _SixMetaPathImporter(__name__)\nclass _MovedItems(_LazyModule):\n    \"\"\"Lazy loading of moved objects\"\"\"\n    __path__ = []  # mark as package\n_moved_attributes = [\n    MovedAttribute(\"cStringIO\", \"cStringIO\", \"io\", \"StringIO\"),\n    MovedAttribute(\"filter\", \"itertools\", \"builtins\", \"ifilter\", \"filter\"),\n    MovedAttribute(\"filterfalse\", \"itertools\", \"itertools\", \"ifilterfalse\", \"filterfalse\"),\n    MovedAttribute(\"input\", \"__builtin__\", \"builtins\", \"raw_input\", \"input\"),\n    MovedAttribute(\"intern\", \"__builtin__\", \"sys\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_moved_attributes = [\n    MovedAttribute(\"cStringIO\", \"cStringIO\", \"io\", \"StringIO\"),\n    MovedAttribute(\"filter\", \"itertools\", \"builtins\", \"ifilter\", \"filter\"),\n    MovedAttribute(\"filterfalse\", \"itertools\", \"itertools\", \"ifilterfalse\", \"filterfalse\"),\n    MovedAttribute(\"input\", \"__builtin__\", \"builtins\", \"raw_input\", \"input\"),\n    MovedAttribute(\"intern\", \"__builtin__\", \"sys\"),\n    MovedAttribute(\"map\", \"itertools\", \"builtins\", \"imap\", \"map\"),\n    MovedAttribute(\"getcwd\", \"os\", \"os\", \"getcwdu\", \"getcwd\"),\n    MovedAttribute(\"getcwdb\", \"os\", \"os\", \"getcwd\", \"getcwdb\"),\n    MovedAttribute(\"getoutput\", \"commands\", \"subprocess\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_MovedItems._moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_MovedItems._moved_attributes = _moved_attributes\nmoves = _MovedItems(__name__ + \".moves\")\n_importer._add_module(moves, \"moves\")\nclass Module_six_moves_urllib_parse(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_parse\"\"\"\n_urllib_parse_moved_attributes = [\n    MovedAttribute(\"ParseResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"SplitResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qs\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qsl\", \"urlparse\", \"urllib.parse\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "moves",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "moves = _MovedItems(__name__ + \".moves\")\n_importer._add_module(moves, \"moves\")\nclass Module_six_moves_urllib_parse(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_parse\"\"\"\n_urllib_parse_moved_attributes = [\n    MovedAttribute(\"ParseResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"SplitResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qs\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qsl\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urldefrag\", \"urlparse\", \"urllib.parse\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_urllib_parse_moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_urllib_parse_moved_attributes = [\n    MovedAttribute(\"ParseResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"SplitResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qs\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qsl\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urldefrag\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urljoin\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlparse\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlsplit\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlunparse\", \"urlparse\", \"urllib.parse\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_parse._moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "Module_six_moves_urllib_parse._moved_attributes = _urllib_parse_moved_attributes\n_importer._add_module(Module_six_moves_urllib_parse(__name__ + \".moves.urllib_parse\"),\n                      \"moves.urllib_parse\", \"moves.urllib.parse\")\nclass Module_six_moves_urllib_error(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_error\"\"\"\n_urllib_error_moved_attributes = [\n    MovedAttribute(\"URLError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"HTTPError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"ContentTooShortError\", \"urllib\", \"urllib.error\"),\n]",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_urllib_error_moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_urllib_error_moved_attributes = [\n    MovedAttribute(\"URLError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"HTTPError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"ContentTooShortError\", \"urllib\", \"urllib.error\"),\n]\nfor attr in _urllib_error_moved_attributes:\n    setattr(Module_six_moves_urllib_error, attr.name, attr)\ndel attr\nModule_six_moves_urllib_error._moved_attributes = _urllib_error_moved_attributes\n_importer._add_module(Module_six_moves_urllib_error(__name__ + \".moves.urllib.error\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_error._moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "Module_six_moves_urllib_error._moved_attributes = _urllib_error_moved_attributes\n_importer._add_module(Module_six_moves_urllib_error(__name__ + \".moves.urllib.error\"),\n                      \"moves.urllib_error\", \"moves.urllib.error\")\nclass Module_six_moves_urllib_request(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_request\"\"\"\n_urllib_request_moved_attributes = [\n    MovedAttribute(\"urlopen\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"install_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"build_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"pathname2url\", \"urllib\", \"urllib.request\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_urllib_request_moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_urllib_request_moved_attributes = [\n    MovedAttribute(\"urlopen\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"install_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"build_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"pathname2url\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"url2pathname\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"getproxies\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"Request\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"OpenerDirector\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPDefaultErrorHandler\", \"urllib2\", \"urllib.request\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_request._moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "Module_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes\n_importer._add_module(Module_six_moves_urllib_request(__name__ + \".moves.urllib.request\"),\n                      \"moves.urllib_request\", \"moves.urllib.request\")\nclass Module_six_moves_urllib_response(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_response\"\"\"\n_urllib_response_moved_attributes = [\n    MovedAttribute(\"addbase\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addclosehook\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfo\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfourl\", \"urllib\", \"urllib.response\"),",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_urllib_response_moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_urllib_response_moved_attributes = [\n    MovedAttribute(\"addbase\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addclosehook\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfo\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfourl\", \"urllib\", \"urllib.response\"),\n]\nfor attr in _urllib_response_moved_attributes:\n    setattr(Module_six_moves_urllib_response, attr.name, attr)\ndel attr\nModule_six_moves_urllib_response._moved_attributes = _urllib_response_moved_attributes",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_response._moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "Module_six_moves_urllib_response._moved_attributes = _urllib_response_moved_attributes\n_importer._add_module(Module_six_moves_urllib_response(__name__ + \".moves.urllib.response\"),\n                      \"moves.urllib_response\", \"moves.urllib.response\")\nclass Module_six_moves_urllib_robotparser(_LazyModule):\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_robotparser\"\"\"\n_urllib_robotparser_moved_attributes = [\n    MovedAttribute(\"RobotFileParser\", \"robotparser\", \"urllib.robotparser\"),\n]\nfor attr in _urllib_robotparser_moved_attributes:\n    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "_urllib_robotparser_moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "_urllib_robotparser_moved_attributes = [\n    MovedAttribute(\"RobotFileParser\", \"robotparser\", \"urllib.robotparser\"),\n]\nfor attr in _urllib_robotparser_moved_attributes:\n    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)\ndel attr\nModule_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes\n_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + \".moves.urllib.robotparser\"),\n                      \"moves.urllib_robotparser\", \"moves.urllib.robotparser\")\nclass Module_six_moves_urllib(types.ModuleType):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "Module_six_moves_urllib_robotparser._moved_attributes",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "Module_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes\n_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + \".moves.urllib.robotparser\"),\n                      \"moves.urllib_robotparser\", \"moves.urllib.robotparser\")\nclass Module_six_moves_urllib(types.ModuleType):\n    \"\"\"Create a six.moves.urllib namespace that resembles the Python 3 namespace\"\"\"\n    __path__ = []  # mark as package\n    parse = _importer._get_module(\"moves.urllib_parse\")\n    error = _importer._get_module(\"moves.urllib_error\")\n    request = _importer._get_module(\"moves.urllib_request\")\n    response = _importer._get_module(\"moves.urllib_response\")",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "next",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "next = advance_iterator\ntry:\n    callable = callable\nexcept NameError:\n    def callable(obj):\n        return any(\"__call__\" in klass.__dict__ for klass in type(obj).__mro__)\nif PY3:\n    def get_unbound_function(unbound):\n        return unbound\n    create_bound_method = types.MethodType",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "get_method_function",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "get_method_function = operator.attrgetter(_meth_func)\nget_method_self = operator.attrgetter(_meth_self)\nget_function_closure = operator.attrgetter(_func_closure)\nget_function_code = operator.attrgetter(_func_code)\nget_function_defaults = operator.attrgetter(_func_defaults)\nget_function_globals = operator.attrgetter(_func_globals)\nif PY3:\n    def iterkeys(d, **kw):\n        return iter(d.keys(**kw))\n    def itervalues(d, **kw):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "get_method_self",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "get_method_self = operator.attrgetter(_meth_self)\nget_function_closure = operator.attrgetter(_func_closure)\nget_function_code = operator.attrgetter(_func_code)\nget_function_defaults = operator.attrgetter(_func_defaults)\nget_function_globals = operator.attrgetter(_func_globals)\nif PY3:\n    def iterkeys(d, **kw):\n        return iter(d.keys(**kw))\n    def itervalues(d, **kw):\n        return iter(d.values(**kw))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "get_function_closure",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "get_function_closure = operator.attrgetter(_func_closure)\nget_function_code = operator.attrgetter(_func_code)\nget_function_defaults = operator.attrgetter(_func_defaults)\nget_function_globals = operator.attrgetter(_func_globals)\nif PY3:\n    def iterkeys(d, **kw):\n        return iter(d.keys(**kw))\n    def itervalues(d, **kw):\n        return iter(d.values(**kw))\n    def iteritems(d, **kw):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "get_function_code",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "get_function_code = operator.attrgetter(_func_code)\nget_function_defaults = operator.attrgetter(_func_defaults)\nget_function_globals = operator.attrgetter(_func_globals)\nif PY3:\n    def iterkeys(d, **kw):\n        return iter(d.keys(**kw))\n    def itervalues(d, **kw):\n        return iter(d.values(**kw))\n    def iteritems(d, **kw):\n        return iter(d.items(**kw))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "get_function_defaults",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "get_function_defaults = operator.attrgetter(_func_defaults)\nget_function_globals = operator.attrgetter(_func_globals)\nif PY3:\n    def iterkeys(d, **kw):\n        return iter(d.keys(**kw))\n    def itervalues(d, **kw):\n        return iter(d.values(**kw))\n    def iteritems(d, **kw):\n        return iter(d.items(**kw))\n    def iterlists(d, **kw):",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "get_function_globals",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "get_function_globals = operator.attrgetter(_func_globals)\nif PY3:\n    def iterkeys(d, **kw):\n        return iter(d.keys(**kw))\n    def itervalues(d, **kw):\n        return iter(d.values(**kw))\n    def iteritems(d, **kw):\n        return iter(d.items(**kw))\n    def iterlists(d, **kw):\n        return iter(d.lists(**kw))",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "print_",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "print_ = getattr(moves.builtins, \"print\", None)\nif print_ is None:\n    def print_(*args, **kwargs):\n        \"\"\"The new-style print function for Python 2.4 and 2.5.\"\"\"\n        fp = kwargs.pop(\"file\", sys.stdout)\n        if fp is None:\n            return\n        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "__path__",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "__path__ = []  # required for PEP 302 and PEP 451\n__package__ = __name__  # see PEP 366 @ReservedAssignment\nif globals().get(\"__spec__\") is not None:\n    __spec__.submodule_search_locations = []  # PEP 451 @UndefinedVariable\n# Remove other six meta path importers, since they cause problems. This can\n# happen if six is removed from sys.modules and then reloaded. (Setuptools does\n# this for some reason.)\nif sys.meta_path:\n    for i, importer in enumerate(sys.meta_path):\n        # Here's some real nastiness: Another \"instance\" of the six module might",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "__package__",
        "kind": 5,
        "importPath": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "description": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "peekOfCode": "__package__ = __name__  # see PEP 366 @ReservedAssignment\nif globals().get(\"__spec__\") is not None:\n    __spec__.submodule_search_locations = []  # PEP 451 @UndefinedVariable\n# Remove other six meta path importers, since they cause problems. This can\n# happen if six is removed from sys.modules and then reloaded. (Setuptools does\n# this for some reason.)\nif sys.meta_path:\n    for i, importer in enumerate(sys.meta_path):\n        # Here's some real nastiness: Another \"instance\" of the six module might\n        # be floating around. Therefore, we can't use isinstance() to check for",
        "detail": "nvim.bundle.vim-prettier.node_modules.@prettier.plugin-python.vendor.python.six",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.tests.fixtures.foo",
        "description": "nvim.bundle.vim-prettier.tests.fixtures.foo",
        "peekOfCode": "def foo(a, \n        *, \n        example=False, **kwargs):\n    print(\n            \"hello world\", \n            example\n            )\ndef i18n_patterns(\n        *urls, \n        prefix_default_language=True",
        "detail": "nvim.bundle.vim-prettier.tests.fixtures.foo",
        "documentation": {}
    },
    {
        "label": "i18n_patterns",
        "kind": 2,
        "importPath": "nvim.bundle.vim-prettier.tests.fixtures.foo",
        "description": "nvim.bundle.vim-prettier.tests.fixtures.foo",
        "peekOfCode": "def i18n_patterns(\n        *urls, \n        prefix_default_language=True\n        ):\n    pass",
        "detail": "nvim.bundle.vim-prettier.tests.fixtures.foo",
        "documentation": {}
    }
]