[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "expanduser",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "isdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "getpreferredencoding",
        "importPath": "locale",
        "description": "locale",
        "isExtraImport": true,
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "vim_get_func",
        "importPath": "powerline.bindings.vim",
        "description": "powerline.bindings.vim",
        "isExtraImport": true,
        "detail": "powerline.bindings.vim",
        "documentation": {}
    },
    {
        "label": "buffer_name",
        "importPath": "powerline.bindings.vim",
        "description": "powerline.bindings.vim",
        "isExtraImport": true,
        "detail": "powerline.bindings.vim",
        "documentation": {}
    },
    {
        "label": "requires_segment_info",
        "importPath": "powerline.theme",
        "description": "powerline.theme",
        "isExtraImport": true,
        "detail": "powerline.theme",
        "documentation": {}
    },
    {
        "label": "denite.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "denite.util",
        "description": "denite.util",
        "detail": "denite.util",
        "documentation": {}
    },
    {
        "label": "GlobError",
        "kind": 6,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "class GlobError(ValueError):\n    pass\ndef glob_rules(root, rules):\n    root = pathlib.Path(root).expanduser()\n    try:\n        files = {f for rule in rules for f in root.glob(rule) if pathlib.Path.is_file(f)}\n    except ValueError as e:\n        raise GlobError(e)\n    return files\nclass IgnoreFileError(ValueError):",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "IgnoreFileError",
        "kind": 6,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "class IgnoreFileError(ValueError):\n    pass\ndef load_ignore_rules(file_path):\n    ignore_rules = []\n    try:\n        with open(expanduser(file_path), 'r') as f:\n            for line in f:\n                line = line.strip()\n                if line == '' or re.search(r'^\\s*#', line):\n                    continue",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def proc(rules_origin):\n    '''\n    input  -> output\n    tail\n    file: xx\n    dir: xx/    -> xxx/**/*\n        xx/**  -> xxx/**/*\n        xx/**/ -> xxx/**/*\n    head\n    under root: /xx    -> xx",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "exception_ignore",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def exception_ignore(ignore_rules_origin):\n    ignore_rules = []\n    exception_ignore_rules = []\n    for rule in ignore_rules_origin:\n        if rule[0] == '!':\n            exception_ignore_rules.append(rule[1:])\n        else:\n            ignore_rules.append(rule)\n    return ignore_rules, exception_ignore_rules\nclass GlobError(ValueError):",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "glob_rules",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def glob_rules(root, rules):\n    root = pathlib.Path(root).expanduser()\n    try:\n        files = {f for rule in rules for f in root.glob(rule) if pathlib.Path.is_file(f)}\n    except ValueError as e:\n        raise GlobError(e)\n    return files\nclass IgnoreFileError(ValueError):\n    pass\ndef load_ignore_rules(file_path):",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "load_ignore_rules",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def load_ignore_rules(file_path):\n    ignore_rules = []\n    try:\n        with open(expanduser(file_path), 'r') as f:\n            for line in f:\n                line = line.strip()\n                if line == '' or re.search(r'^\\s*#', line):\n                    continue\n                ignore_rules.append(line)\n    except FileNotFoundError as e:",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "far_glob",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def far_glob(root, rules, ignore_rules):\n    '''\n    root: string\n    rules, ignore_rules: list\n    root can contain '~'\n    rules and ignore_rules:\n        xx, yy, is path expression, can contain '/'\n        head:\n            /xx              directly udner the 'root' dir\n            xx               recursively udner the 'root' dir",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "rg_ignore_globs",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def rg_ignore_globs(files, as_str=True):\n    ignored = {\n        ignore_glob\n        for sublist in [\n            open(ignore_file, 'r').read().split('\\n')\n            for ignore_file in files\n            if os.path.exists(ignore_file)\n        ]\n        for ignore_glob in sublist\n        if len(ignore_glob.strip()) > 0 and (\"#\" not in ignore_glob)",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "rg_rules_glob",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "description": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "peekOfCode": "def rg_rules_glob(rules, as_str=True):\n    # Don't include * globbing rules.  rg behaves like this by default, and explicitly\n    # adding these causes rg to stop ignoring its built-in ignored files.\n    rules = [ r for r in rules if r not in ( '*', '**/*' ) ]\n    if as_str:\n        return ' '.join(map(lambda dir: f\"-g \\\"{dir}\\\"\", rules))\n    else:\n        return [ '-g' if g else d for d in rules for g in (True, False) ]",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.far_glob",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.shell",
        "description": "bundle.far.vim.rplugin.python3.far.sources.shell",
        "peekOfCode": "def search(ctx, args, cmdargs):\n    logger.debug('search(%s, %s, %s)', str(ctx), str(args), str(cmdargs))\n    final_result = {'warning': ''}\n    if not args.get('cmd'):\n        return {'error': 'no cmd in args'}\n    source = ctx['source']\n    pattern = ctx['pattern']\n    regex = ctx['regex']\n    case_sensitive = ctx['case_sensitive']\n    file_mask = ctx['file_mask']",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.shell",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "bundle.far.vim.rplugin.python3.far.sources.shell",
        "description": "bundle.far.vim.rplugin.python3.far.sources.shell",
        "peekOfCode": "logger = logging.getLogger('far')\ndef search(ctx, args, cmdargs):\n    logger.debug('search(%s, %s, %s)', str(ctx), str(args), str(cmdargs))\n    final_result = {'warning': ''}\n    if not args.get('cmd'):\n        return {'error': 'no cmd in args'}\n    source = ctx['source']\n    pattern = ctx['pattern']\n    regex = ctx['regex']\n    case_sensitive = ctx['case_sensitive']",
        "detail": "bundle.far.vim.rplugin.python3.far.sources.shell",
        "documentation": {}
    },
    {
        "label": "print_num",
        "kind": 2,
        "importPath": "bundle.far.vim.test.very long directory name with spaces.very long file name also with spaces",
        "description": "bundle.far.vim.test.very long directory name with spaces.very long file name also with spaces",
        "peekOfCode": "def print_num(number):\n    print(number)",
        "detail": "bundle.far.vim.test.very long directory name with spaces.very long file name also with spaces",
        "documentation": {}
    },
    {
        "label": "guesses_made",
        "kind": 5,
        "importPath": "bundle.far.vim.test.guess",
        "description": "bundle.far.vim.test.guess",
        "peekOfCode": "guesses_made = 0\nname = raw_input('Hello! What is your name?\\n')\nnumber = random.randint(1, 20)\nprint 'Well, {0}, I am thinking of a number between 1 and 20.'.format(name)\nwhile guesses_made < 6:\n    guess = int(raw_input('Take a guess: '))\n    guesses_made += 1\n    if guess < number:\n        print 'Your guess is too low.'\n    if guess > number:",
        "detail": "bundle.far.vim.test.guess",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "bundle.far.vim.test.guess",
        "description": "bundle.far.vim.test.guess",
        "peekOfCode": "name = raw_input('Hello! What is your name?\\n')\nnumber = random.randint(1, 20)\nprint 'Well, {0}, I am thinking of a number between 1 and 20.'.format(name)\nwhile guesses_made < 6:\n    guess = int(raw_input('Take a guess: '))\n    guesses_made += 1\n    if guess < number:\n        print 'Your guess is too low.'\n    if guess > number:\n        print 'Your guess is too high.'",
        "detail": "bundle.far.vim.test.guess",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "bundle.far.vim.test.guess",
        "description": "bundle.far.vim.test.guess",
        "peekOfCode": "number = random.randint(1, 20)\nprint 'Well, {0}, I am thinking of a number between 1 and 20.'.format(name)\nwhile guesses_made < 6:\n    guess = int(raw_input('Take a guess: '))\n    guesses_made += 1\n    if guess < number:\n        print 'Your guess is too low.'\n    if guess > number:\n        print 'Your guess is too high.'\n    if guess == number:",
        "detail": "bundle.far.vim.test.guess",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "bundle.far.vim.test.odd",
        "description": "bundle.far.vim.test.odd",
        "peekOfCode": "num = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))",
        "detail": "bundle.far.vim.test.odd",
        "documentation": {}
    },
    {
        "label": "iter_primes",
        "kind": 2,
        "importPath": "bundle.far.vim.test.prime",
        "description": "bundle.far.vim.test.prime",
        "peekOfCode": "def iter_primes():\n     # an iterator of all numbers between 2 and +infinity\n     numbers = itertools.count(2)\n     # generate primes forever\n     while True:\n         # get the first number from the iterator (always a prime)\n         prime = numbers.next()\n         yield prime\n         # this code iteratively builds up a chain of\n         # filters...slightly tricky, but ponder it a bit",
        "detail": "bundle.far.vim.test.prime",
        "documentation": {}
    },
    {
        "label": "generate_file",
        "kind": 2,
        "importPath": "bundle.plenary.nvim.scripts.update_vararg",
        "description": "bundle.plenary.nvim.scripts.update_vararg",
        "peekOfCode": "def generate_file(name, outpath, **kwargs):\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('./vararg'))\n    template = env.get_template(name)\n    path = os.path.join(outpath, name)\n    with open(path, 'w') as fp:\n        fp.write(template.render(kwargs))\n    subprocess.run([\"lua-format\", \"-i\", path])\nif __name__ == '__main__':\n    generate_file('rotate.lua', '../lua/plenary/vararg', amount=16)",
        "detail": "bundle.plenary.nvim.scripts.update_vararg",
        "documentation": {}
    },
    {
        "label": "webdevicons",
        "kind": 2,
        "importPath": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "def webdevicons(pl, segment_info):\n\twebdevicons = vim_get_func('WebDevIconsGetFileTypeSymbol')\n\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],\n\t\t}]\n@requires_segment_info\ndef webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')",
        "detail": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "webdevicons_file_format",
        "kind": 2,
        "importPath": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "def webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{\n\t\t'contents': webdevicons_file_format(),\n\t\t'highlight_groups': ['webdevicons_file_format', 'file_format'],\n\t\t}]",
        "detail": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\tvim",
        "kind": 5,
        "importPath": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\tvim = {}\nfrom powerline.bindings.vim import (vim_get_func, buffer_name)\nfrom powerline.theme import requires_segment_info\n@requires_segment_info\ndef webdevicons(pl, segment_info):\n\twebdevicons = vim_get_func('WebDevIconsGetFileTypeSymbol')\n\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],",
        "detail": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\twebdevicons",
        "kind": 5,
        "importPath": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\twebdevicons = vim_get_func('WebDevIconsGetFileTypeSymbol')\n\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],\n\t\t}]\n@requires_segment_info\ndef webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{",
        "detail": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\tname = buffer_name(segment_info)\n\treturn [] if not webdevicons else [{\n\t\t'contents': webdevicons(name),\n\t\t'highlight_groups': ['webdevicons', 'file_name'],\n\t\t}]\n@requires_segment_info\ndef webdevicons_file_format(pl, segment_info):\n\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{\n\t\t'contents': webdevicons_file_format(),",
        "detail": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "\twebdevicons_file_format",
        "kind": 5,
        "importPath": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "description": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "peekOfCode": "\twebdevicons_file_format = vim_get_func('WebDevIconsGetFileFormatSymbol')\n\treturn [] if not webdevicons_file_format else [{\n\t\t'contents': webdevicons_file_format(),\n\t\t'highlight_groups': ['webdevicons_file_format', 'file_format'],\n\t\t}]",
        "detail": "bundle.vim-devicons.pythonx.vim_devicons.powerline.segments",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "class Filter(Base):\n\tdef __init__(self, vim):\n\t\tsuper().__init__(vim)\n\t\tself.name = 'devicons_denite_converter'\n\t\tself.description = 'add devicons in front of candidates'\n\tdef filter(self, context):\n\t\tfor candidate in context['candidates']:\n\t\t\tif 'bufnr' in candidate:\n\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\tself.name",
        "kind": 5,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\tself.name = 'devicons_denite_converter'\n\t\tself.description = 'add devicons in front of candidates'\n\tdef filter(self, context):\n\t\tfor candidate in context['candidates']:\n\t\t\tif 'bufnr' in candidate:\n\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\tself.description",
        "kind": 5,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\tself.description = 'add devicons in front of candidates'\n\tdef filter(self, context):\n\t\tfor candidate in context['candidates']:\n\t\t\tif 'bufnr' in candidate:\n\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tbufname",
        "kind": 5,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tbufname = self.vim.funcs.bufname(candidate['bufnr'])\n\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfilename",
        "kind": 5,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tfilename = self.vim.funcs.fnamemodify(bufname, ':p:t')\n\t\t\telif 'word' in candidate and 'action__path' in candidate:\n\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfilename",
        "kind": 5,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tfilename = candidate['word']\n\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\ticon",
        "kind": 5,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\ticon = self.vim.funcs.WebDevIconsGetFileTypeSymbol(\n\t\t\t\tfilename, isdir(filename))\n\t\t\t# Customize output format if not done already.\n\t\t\tif icon not in candidate.get('abbr', '')[:10]:\n\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcandidate['abbr']",
        "kind": 5,
        "importPath": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "description": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "peekOfCode": "\t\t\t\tcandidate['abbr'] = ' {} {}'.format(\n\t\t\t\t\ticon, candidate.get('abbr', candidate['word']))\n\t\treturn context['candidates']",
        "detail": "bundle.vim-devicons.rplugin.python3.denite.filter.devicons_denite_converter",
        "documentation": {}
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "bundle.vim-go.rplugin.python3.denite.source.decls",
        "description": "bundle.vim-go.rplugin.python3.denite.source.decls",
        "peekOfCode": "class Source(Base):\n    def __init__(self, vim):\n        super().__init__(vim)\n        self.name = 'decls'\n        self.kind = 'file'\n    def gather_candidates(self, context):\n        bin_path = self.vim.call('go#path#CheckBinPath', 'motion')\n        if bin_path == '':\n            return []\n        expand = context['args'][0] if context['args'] else '%:p:h'",
        "detail": "bundle.vim-go.rplugin.python3.denite.source.decls",
        "documentation": {}
    },
    {
        "label": "DECLS_SYNTAX_HIGHLIGHT",
        "kind": 5,
        "importPath": "bundle.vim-go.rplugin.python3.denite.source.decls",
        "description": "bundle.vim-go.rplugin.python3.denite.source.decls",
        "peekOfCode": "DECLS_SYNTAX_HIGHLIGHT = [\n    {'name': 'FilePath', 're': r'[^:]*\\ze:', 'link': 'Comment'},\n    {'name': 'Line', 're': r'\\d\\+\\ze :', 'link': 'LineNr'},\n    {'name': 'WholeFunction', 're': r'\\vfunc %(\\([^)]+\\) )?[^(]+'},\n    {'name': 'Function', 'parent': 'WholeFunction',\n     're': r'\\S\\+\\ze(', 'link': 'Function'},\n    {'name': 'WholeType', 're': r'type \\S\\+'},\n    {'name': 'Type', 'parent': 'WholeType',\n     're': r'\\v( )@<=\\S+', 'link': 'Type'},\n    {'name': 'Separator', 're': r':', 'conceal': True},",
        "detail": "bundle.vim-go.rplugin.python3.denite.source.decls",
        "documentation": {}
    }
]